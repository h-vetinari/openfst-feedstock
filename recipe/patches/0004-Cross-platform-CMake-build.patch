From 95bbd9427a37aa9e89df0bffdc84e3aee4ad722b Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Wed, 3 Aug 2022 13:09:59 -0700
Subject: [PATCH] Cross platform CMake build

---
 CMakeLists.txt                                |  54 ++++++
 src/CMakeLists.txt                            |  20 ++
 src/bin/CMakeLists.txt                        |  85 ++++++++
 src/bin/fstcompile-main.cc                    |  12 +-
 src/bin/fstdraw-main.cc                       |   2 +-
 src/bin/fstinfo-main.cc                       |   8 +
 src/bin/fstprint-main.cc                      |  13 +-
 src/extensions/CMakeLists.txt                 |  43 ++++
 src/extensions/compact/CMakeLists.txt         | 103 ++++++++++
 src/extensions/compress/CMakeLists.txt        |  59 ++++++
 src/extensions/const/CMakeLists.txt           |  49 +++++
 src/extensions/far/CMakeLists.txt             |  77 ++++++++
 src/extensions/far/compile-strings.cc         |   6 +-
 src/extensions/far/far-class.cc               |  17 +-
 src/extensions/far/farcompilestrings-main.cc  |   8 +-
 src/extensions/far/farscript.cc               |  26 +--
 src/extensions/far/sttable.cc                 |   2 +-
 src/extensions/linear/CMakeLists.txt          |  88 +++++++++
 src/extensions/linear/linear-tagger-fst.cc    |   3 +-
 src/extensions/linear/linearscript.cc         |   8 +-
 src/extensions/lookahead/CMakeLists.txt       |  43 ++++
 src/extensions/mpdt/CMakeLists.txt            |  38 ++++
 src/extensions/ngram/CMakeLists.txt           |  54 ++++++
 src/extensions/ngram/bitmap-index.cc          |   7 +-
 src/extensions/ngram/nthbit.cc                |   2 +-
 src/extensions/pdt/CMakeLists.txt             |  44 +++++
 src/extensions/python/CMakeLists.txt          |  22 +++
 src/extensions/special/CMakeLists.txt         |  47 +++++
 src/include/fst/cache.h                       |   5 +-
 src/include/fst/compat.h                      |  52 +++--
 src/include/fst/encode.h                      |   2 +
 src/include/fst/error-weight.h                |   3 +-
 src/include/fst/expanded-fst.h                |  11 ++
 src/include/fst/exports/exports.h             |  34 ++++
 src/include/fst/exports/fst_Export.h          |  42 ++++
 src/include/fst/exports/fstcompact_Export.h   |  42 ++++
 .../fst/exports/fstcompressscript_Export.h    |  42 ++++
 src/include/fst/exports/fstconst_Export.h     |  42 ++++
 src/include/fst/exports/fstfar_Export.h       |  42 ++++
 src/include/fst/exports/fstfarscript_Export.h |  42 ++++
 .../fst/exports/fstlinearscript_Export.h      |  42 ++++
 .../fst/exports/fstmpdtscript_Export.h        |  42 ++++
 src/include/fst/exports/fstngram_Export.h     |  42 ++++
 src/include/fst/exports/fstpdtscript_Export.h |  42 ++++
 src/include/fst/exports/fstscript_Export.h    |  42 ++++
 src/include/fst/exports/fstspecial_Export.h   |  42 ++++
 .../fst/extensions/compress/compress.h        |  10 +
 .../fst/extensions/compress/compressscript.h  |   6 +-
 .../fst/extensions/far/compile-strings.h      |  20 +-
 src/include/fst/extensions/far/create.h       |   2 +
 src/include/fst/extensions/far/far-class.h    |   6 +-
 src/include/fst/extensions/far/far.h          |  33 +++-
 src/include/fst/extensions/far/farscript.h    |  30 +--
 src/include/fst/extensions/far/getters.h      |   9 +-
 .../fst/extensions/far/print-strings.h        |   5 +-
 src/include/fst/extensions/far/script-impl.h  |   7 +-
 src/include/fst/extensions/far/stlist.h       |  11 +-
 src/include/fst/extensions/far/sttable.h      |   3 +-
 .../fst/extensions/linear/linear-fst.h        |  17 ++
 .../fst/extensions/linear/linearscript.h      |  31 +--
 src/include/fst/extensions/mpdt/mpdt.h        |   3 +-
 src/include/fst/extensions/mpdt/mpdtscript.h  |  10 +-
 .../fst/extensions/mpdt/read_write_utils.h    |   4 +-
 .../fst/extensions/ngram/bitmap-index.h       |   6 +
 src/include/fst/extensions/ngram/ngram-fst.h  |   8 +
 src/include/fst/extensions/ngram/nthbit.h     |  12 +-
 src/include/fst/extensions/pdt/getters.h      |   5 +-
 src/include/fst/extensions/pdt/pdtscript.h    |  15 +-
 src/include/fst/extensions/special/phi-fst.h  |   8 +-
 src/include/fst/extensions/special/rho-fst.h  |   7 +-
 .../fst/extensions/special/sigma-fst.h        |   6 +-
 src/include/fst/flags.h                       |  63 ++++--
 src/include/fst/fst-decl.h                    |   5 +-
 src/include/fst/fst.h                         |  20 +-
 src/include/fst/generic-register.h            |  32 ++-
 src/include/fst/log.h                         |   3 +-
 src/include/fst/lookahead-matcher.h           |   5 +-
 src/include/fst/mapped-file.h                 |   3 +-
 src/include/fst/mutable-fst.h                 |   8 +
 src/include/fst/properties.h                  |  37 ++--
 src/include/fst/register.h                    |  14 +-
 src/include/fst/script/arc-class.h            |   3 +-
 src/include/fst/script/arcfilter-impl.h       |   3 +-
 src/include/fst/script/arciterator-class.h    |   5 +-
 src/include/fst/script/arcsort.h              |   7 +-
 src/include/fst/script/closure.h              |   6 +-
 src/include/fst/script/compile-impl.h         |   4 +-
 src/include/fst/script/compile.h              |  10 +-
 src/include/fst/script/compose.h              |   5 +-
 src/include/fst/script/concat.h               |   9 +-
 src/include/fst/script/connect.h              |   5 +-
 src/include/fst/script/convert.h              |   5 +-
 src/include/fst/script/decode.h               |   5 +-
 src/include/fst/script/determinize.h          |   5 +-
 src/include/fst/script/difference.h           |   6 +-
 src/include/fst/script/disambiguate.h         |   5 +-
 src/include/fst/script/draw-impl.h            |   1 +
 src/include/fst/script/draw.h                 |   5 +-
 src/include/fst/script/encode.h               |   5 +-
 src/include/fst/script/encodemapper-class.h   |  16 +-
 src/include/fst/script/epsnormalize.h         |   5 +-
 src/include/fst/script/equal.h                |   5 +-
 src/include/fst/script/equivalent.h           |   5 +-
 src/include/fst/script/fst-class.h            |  18 +-
 src/include/fst/script/fstscript-decl.h       |  19 +-
 src/include/fst/script/fstscript.h            |   1 +
 src/include/fst/script/getters.h              |  31 +--
 src/include/fst/script/info-impl.h            |   7 +-
 src/include/fst/script/info.h                 |   5 +-
 src/include/fst/script/intersect.h            |   5 +-
 src/include/fst/script/invert.h               |   5 +-
 src/include/fst/script/isomorphic.h           |   5 +-
 src/include/fst/script/map.h                  |   8 +-
 src/include/fst/script/minimize.h             |   5 +-
 src/include/fst/script/print-impl.h           |   1 +
 src/include/fst/script/print.h                |   8 +-
 src/include/fst/script/project.h              |   5 +-
 src/include/fst/script/prune.h                |   7 +-
 src/include/fst/script/push.h                 |   7 +-
 src/include/fst/script/randequivalent.h       |   3 +-
 src/include/fst/script/randgen.h              |   3 +-
 src/include/fst/script/relabel.h              |   7 +-
 src/include/fst/script/replace.h              |   7 +-
 src/include/fst/script/reverse.h              |   5 +-
 src/include/fst/script/reweight.h             |   3 +-
 src/include/fst/script/rmepsilon.h            |   7 +-
 src/include/fst/script/script-impl.h          |  13 +-
 src/include/fst/script/shortest-distance.h    |   9 +-
 src/include/fst/script/shortest-path.h        |   7 +-
 src/include/fst/script/stateiterator-class.h  |   7 +-
 src/include/fst/script/synchronize.h          |   5 +-
 src/include/fst/script/text-io.h              |   5 +-
 src/include/fst/script/topsort.h              |   5 +-
 src/include/fst/script/union.h                |   7 +-
 src/include/fst/script/verify.h               |   6 +-
 src/include/fst/script/weight-class.h         |  41 ++--
 src/include/fst/string.h                      |   3 +-
 src/include/fst/symbol-table-ops.h            |   9 +-
 src/include/fst/symbol-table.h                |  14 +-
 src/include/fst/test-properties.h             |   3 +-
 src/include/fst/test/fst_test.h               |  12 +-
 src/include/fst/util.h                        |  17 +-
 src/include/fst/vector-fst.h                  |   6 +-
 src/include/fst/weight.h                      |  10 +-
 src/lib/CMakeLists.txt                        |  41 ++++
 src/lib/flags.cc                              |  10 +-
 src/lib/fst-types.cc                          |  62 +++---
 src/lib/fst.cc                                |   9 +-
 src/lib/mapped-file.cc                        |   5 +
 src/lib/symbol-table.cc                       |   6 +-
 src/lib/util.cc                               |   1 +
 src/lib/weight.cc                             |  13 +-
 src/script/CMakeLists.txt                     |  75 +++++++
 src/script/encodemapper-class.cc              |   9 +
 src/script/fst-class.cc                       |  14 ++
 src/script/text-io.cc                         |  14 +-
 src/script/weight-class.cc                    |   4 +
 src/test/CMakeLists.txt                       | 183 ++++++++++++++++++
 src/test/fst_test.cc                          |   5 +-
 159 files changed, 2564 insertions(+), 378 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 src/CMakeLists.txt
 create mode 100644 src/bin/CMakeLists.txt
 create mode 100644 src/extensions/CMakeLists.txt
 create mode 100644 src/extensions/compact/CMakeLists.txt
 create mode 100644 src/extensions/compress/CMakeLists.txt
 create mode 100644 src/extensions/const/CMakeLists.txt
 create mode 100644 src/extensions/far/CMakeLists.txt
 create mode 100644 src/extensions/linear/CMakeLists.txt
 create mode 100644 src/extensions/lookahead/CMakeLists.txt
 create mode 100644 src/extensions/mpdt/CMakeLists.txt
 create mode 100644 src/extensions/ngram/CMakeLists.txt
 create mode 100644 src/extensions/pdt/CMakeLists.txt
 create mode 100644 src/extensions/python/CMakeLists.txt
 create mode 100644 src/extensions/special/CMakeLists.txt
 create mode 100644 src/include/fst/exports/exports.h
 create mode 100644 src/include/fst/exports/fst_Export.h
 create mode 100644 src/include/fst/exports/fstcompact_Export.h
 create mode 100644 src/include/fst/exports/fstcompressscript_Export.h
 create mode 100644 src/include/fst/exports/fstconst_Export.h
 create mode 100644 src/include/fst/exports/fstfar_Export.h
 create mode 100644 src/include/fst/exports/fstfarscript_Export.h
 create mode 100644 src/include/fst/exports/fstlinearscript_Export.h
 create mode 100644 src/include/fst/exports/fstmpdtscript_Export.h
 create mode 100644 src/include/fst/exports/fstngram_Export.h
 create mode 100644 src/include/fst/exports/fstpdtscript_Export.h
 create mode 100644 src/include/fst/exports/fstscript_Export.h
 create mode 100644 src/include/fst/exports/fstspecial_Export.h
 create mode 100644 src/lib/CMakeLists.txt
 create mode 100644 src/script/CMakeLists.txt
 create mode 100644 src/test/CMakeLists.txt

diff --git a/CMakeLists.txt b/CMakeLists.txt
new file mode 100644
index 0000000..fb41928
--- /dev/null
+++ b/CMakeLists.txt
@@ -0,0 +1,54 @@
+
+cmake_minimum_required(VERSION 3.20)
+project(openfst)
+
+include(GNUInstallDirs)
+include(GenerateExportHeader)
+set(CMAKE_MACOSX_RPATH 1)
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_EXTENSIONS OFF)
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+if (MSVC)
+    find_package(dlfcn-win32 REQUIRED)
+    set(CMAKE_DL_LIBS dlfcn-win32::dl)
+    set(CMAKE_ENABLE_EXPORTS ON)
+
+    #set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+    add_definitions(-DWIN32_LEAN_AND_MEAN)
+    add_definitions(-DNOMINMAX)
+    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+    add_definitions(-D_USE_MATH_DEFINES)
+    add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)
+
+    # some warnings related with fst
+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
+    
+endif (MSVC)
+option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+
+set(SOVERSION "25")
+
+
+option(HAVE_BIN          "Build the fst binaries" ON)
+option(HAVE_SCRIPT       "Build the fstscript" ON)
+option(HAVE_COMPACT      "Build compact" ON)
+option(HAVE_COMPRESS "Build compress" ON)
+option(HAVE_CONST   "Build const" ON)
+option(HAVE_FAR  "Build far" ON)
+option(HAVE_GRM "Build grm" ON)
+option(HAVE_PDT "Build pdt" ON)
+option(HAVE_MPDT "Build mpdt" ON)
+option(HAVE_LINEAR "Build linear" ON)
+option(HAVE_LOOKAHEAD "Build lookahead" ON)
+option(HAVE_NGRAM "Build ngram" ON)
+option(HAVE_PYTHON "Build python" OFF)
+option(HAVE_SPECIAL "Build special" ON)
+option(OPENFST_BUILD_TEST "Build tests" ON) 
+
+if (OPENFST_BUILD_TEST)
+    include(CTest)
+    enable_testing()
+endif()
+
+add_subdirectory(src)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
new file mode 100644
index 0000000..0bdd55d
--- /dev/null
+++ b/src/CMakeLists.txt
@@ -0,0 +1,20 @@
+#-DHAVE_CONFIG_H -I./../include -fno-exceptions -funsigned-char -std=c++11 -MT symbol-table.lo -MD -MP -MF .deps/symbol-table.Tpo -c symbol-table.cc  -fno-common -DPIC -o .libs/symbol-table.o
+
+include_directories(./include/)
+install(DIRECTORY include/ DESTINATION include/
+        FILES_MATCHING PATTERN "*.h")
+install(DIRECTORY include/ DESTINATION include/
+        FILES_MATCHING PATTERN "*.inc")
+
+add_subdirectory(lib)
+add_subdirectory(script)
+
+if(HAVE_BIN)
+  add_subdirectory(bin)
+endif(HAVE_BIN)
+
+add_subdirectory(extensions)
+
+if (${OPENFST_BUILD_TEST})
+add_subdirectory(test)
+endif()
\ No newline at end of file
diff --git a/src/bin/CMakeLists.txt b/src/bin/CMakeLists.txt
new file mode 100644
index 0000000..2d02c25
--- /dev/null
+++ b/src/bin/CMakeLists.txt
@@ -0,0 +1,85 @@
+function (add_executable2 _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fstscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+include_directories(../include ../script/)
+
+add_executable2(fstarcsort fstarcsort-main.cc fstarcsort.cc)
+
+add_executable2(fstclosure fstclosure-main.cc fstclosure.cc)
+
+add_executable2(fstcompile  fstcompile-main.cc fstcompile.cc)
+
+add_executable2(fstcompose fstcompose-main.cc fstcompose.cc)
+
+add_executable2(fstconcat fstconcat-main.cc fstconcat.cc)
+
+add_executable2(fstconnect fstconnect-main.cc fstconnect.cc)
+
+add_executable2(fstconvert fstconvert-main.cc fstconvert.cc)
+
+add_executable2(fstdeterminize fstdeterminize-main.cc fstdeterminize.cc)
+
+add_executable2(fstdifference fstdifference-main.cc fstdifference.cc)
+
+add_executable2(fstdisambiguate fstdisambiguate-main.cc fstdisambiguate.cc)
+
+add_executable2(fstdraw fstdraw-main.cc fstdraw.cc)
+
+add_executable2(fstencode fstencode-main.cc fstencode.cc)
+
+add_executable2(fstepsnormalize fstepsnormalize-main.cc fstepsnormalize.cc)
+
+add_executable2(fstequal fstequal-main.cc fstequal.cc)
+
+add_executable2(fstequivalent fstequivalent-main.cc fstequivalent.cc)
+
+add_executable2(fstinfo fstinfo-main.cc fstinfo.cc)
+
+add_executable2(fstintersect fstintersect-main.cc fstintersect.cc)
+
+add_executable2(fstinvert fstinvert-main.cc fstinvert.cc)
+
+add_executable2(fstisomorphic fstisomorphic-main.cc fstisomorphic.cc)
+
+add_executable2(fstmap fstmap-main.cc fstmap.cc)
+
+add_executable2(fstminimize fstminimize-main.cc fstminimize.cc)
+
+add_executable2(fstprint fstprint-main.cc fstprint.cc)
+
+add_executable2(fstproject fstproject-main.cc fstproject.cc)
+
+add_executable2(fstprune fstprune-main.cc fstprune.cc)
+
+add_executable2(fstpush fstpush-main.cc fstpush.cc)
+
+add_executable2(fstrandgen fstrandgen-main.cc fstrandgen.cc)
+
+add_executable2(fstrelabel fstrelabel-main.cc fstrelabel.cc)
+
+add_executable2(fstreplace fstreplace-main.cc fstreplace.cc)
+
+add_executable2(fstreverse fstreverse-main.cc fstreverse.cc)
+
+add_executable2(fstreweight fstreweight-main.cc fstreweight.cc)
+
+add_executable2(fstrmepsilon fstrmepsilon-main.cc fstrmepsilon.cc)
+
+add_executable2(fstshortestdistance fstshortestdistance-main.cc fstshortestdistance.cc)
+
+add_executable2(fstshortestpath fstshortestpath-main.cc fstshortestpath.cc)
+
+add_executable2(fstsymbols fstsymbols-main.cc fstsymbols.cc)
+
+add_executable2(fstsynchronize fstsynchronize-main.cc fstsynchronize.cc)
+
+add_executable2(fsttopsort fsttopsort-main.cc fsttopsort.cc)
+
+add_executable2(fstunion fstunion-main.cc fstunion.cc)
\ No newline at end of file
diff --git a/src/bin/fstcompile-main.cc b/src/bin/fstcompile-main.cc
index 2adb8ae..0ca18dc 100644
--- a/src/bin/fstcompile-main.cc
+++ b/src/bin/fstcompile-main.cc
@@ -22,6 +22,11 @@
 #include <istream>
 #include <memory>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
 #include <fst/log.h>
@@ -59,13 +64,18 @@ int fstcompile_main(int argc, char **argv) {
   std::string source = "standard input";
   std::ifstream fstrm;
   if (argc > 1 && strcmp(argv[1], "-") != 0) {
-    fstrm.open(argv[1]);
+    fstrm.open(argv[1], std::ios_base::in | std::ios_base::binary);
     if (!fstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[1];
       return 1;
     }
     source = argv[1];
   }
+  #ifdef _WIN32
+    if (source == "standard input") {
+        _setmode(_fileno(stdin), _O_BINARY);
+    }
+  #endif
   std::istream &istrm = fstrm.is_open() ? fstrm : std::cin;
 
   const SymbolTableTextOptions opts(FST_FLAGS_allow_negative_labels);
diff --git a/src/bin/fstdraw-main.cc b/src/bin/fstdraw-main.cc
index 75b11d8..28e904d 100644
--- a/src/bin/fstdraw-main.cc
+++ b/src/bin/fstdraw-main.cc
@@ -73,7 +73,7 @@ int fstdraw_main(int argc, char **argv) {
       argc > 2 && strcmp(argv[2], "-") != 0 ? argv[2] : "";
   std::ofstream fstrm;
   if (!out_name.empty()) {
-    fstrm.open(out_name);
+    fstrm.open(out_name, std::ios_base::out | std::ios_base::binary);
     if (!fstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << out_name;
       return 1;
diff --git a/src/bin/fstinfo-main.cc b/src/bin/fstinfo-main.cc
index 6e39640..7419d30 100644
--- a/src/bin/fstinfo-main.cc
+++ b/src/bin/fstinfo-main.cc
@@ -23,6 +23,11 @@
 #include <iostream>
 #include <memory>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
 #include <fst/script/arcfilter-impl.h>
@@ -61,6 +66,9 @@ bool PrintHeaderInfo(const std::string &in_name) {
     }
   }
 
+  #ifdef _WIN32
+    _setmode(_fileno(stdout), _O_BINARY);
+  #endif
   fst::PrintHeader(std::cout, header);
   return true;
 }
diff --git a/src/bin/fstprint-main.cc b/src/bin/fstprint-main.cc
index cb24ce4..01b31ba 100644
--- a/src/bin/fstprint-main.cc
+++ b/src/bin/fstprint-main.cc
@@ -18,10 +18,14 @@
 // Prints out binary FSTs in simple text format used by AT&T.
 
 #include <cstring>
-#include <iostream>
 #include <memory>
 #include <ostream>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/flags.h>
 #include <fst/log.h>
@@ -68,13 +72,18 @@ int fstprint_main(int argc, char **argv) {
   std::string dest = "standard output";
   std::ofstream fstrm;
   if (argc == 3) {
-    fstrm.open(argv[2]);
+    fstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!fstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[2];
       return 1;
     }
     dest = argv[2];
   }
+  #ifdef _WIN32
+  if (!fstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &ostrm = fstrm.is_open() ? fstrm : std::cout;
   ostrm.precision(9);
 
diff --git a/src/extensions/CMakeLists.txt b/src/extensions/CMakeLists.txt
new file mode 100644
index 0000000..094ab74
--- /dev/null
+++ b/src/extensions/CMakeLists.txt
@@ -0,0 +1,43 @@
+if(HAVE_COMPACT)
+  add_subdirectory(compact)
+endif(HAVE_COMPACT)
+
+if(HAVE_COMPRESS)
+  add_subdirectory(compress)
+endif(HAVE_COMPRESS)
+
+if(HAVE_CONST)
+  add_subdirectory(const)
+endif(HAVE_CONST)
+
+if(HAVE_FAR OR HAVE_GRM)
+  add_subdirectory(far)
+endif(HAVE_FAR OR HAVE_GRM)
+
+if(HAVE_LINEAR)
+  add_subdirectory(linear)
+endif(HAVE_LINEAR)
+
+if(HAVE_LOOKAHEAD)
+  add_subdirectory(lookahead)
+endif(HAVE_LOOKAHEAD)
+
+if(HAVE_MPDT OR HAVE_GRM)
+  add_subdirectory(mpdt)
+endif(HAVE_MPDT OR HAVE_GRM)
+
+if(HAVE_NGRAM)
+  add_subdirectory(ngram)
+endif(HAVE_NGRAM)
+
+if(HAVE_PYTHON)
+  add_subdirectory(python)
+endif(HAVE_PYTHON)
+
+if(HAVE_PDT OR HAVE_MPDT OR HAVE_GRM)
+  add_subdirectory(pdt)
+endif(HAVE_PDT OR HAVE_MPDT OR HAVE_GRM)
+
+if(HAVE_SPECIAL)
+  add_subdirectory(special)
+endif(HAVE_SPECIAL)
\ No newline at end of file
diff --git a/src/extensions/compact/CMakeLists.txt b/src/extensions/compact/CMakeLists.txt
new file mode 100644
index 0000000..cb8a2b1
--- /dev/null
+++ b/src/extensions/compact/CMakeLists.txt
@@ -0,0 +1,103 @@
+add_library(fstcompact
+  compact8_acceptor-fst.cc 
+  compact8_string-fst.cc 
+  compact8_unweighted-fst.cc 
+  compact8_unweighted_acceptor-fst.cc 
+  compact8_weighted_string-fst.cc 
+  compact16_acceptor-fst.cc 
+  compact16_string-fst.cc 
+  compact16_unweighted-fst.cc 
+  compact16_unweighted_acceptor-fst.cc 
+  compact16_weighted_string-fst.cc 
+  compact64_acceptor-fst.cc 
+  compact64_string-fst.cc 
+  compact64_unweighted-fst.cc 
+  compact64_unweighted_acceptor-fst.cc 
+  compact64_weighted_string-fst.cc
+)
+
+target_link_libraries(fstcompact fst)
+set_target_properties(fstcompact PROPERTIES 
+  SOVERSION "${SOVERSION}"
+)
+GENERATE_EXPORT_HEADER( fstcompact
+             BASE_NAME fstcompact
+             EXPORT_MACRO_NAME fstcompact_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstcompact_Export.h
+             STATIC_DEFINE fstcompact_BUILT_AS_STATIC
+)
+target_compile_definitions(fstcompact PRIVATE fstcompact_EXPORTS)
+target_include_directories(fstcompact PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+
+install(TARGETS fstcompact 
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin
+)
+
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+    endif()
+
+    #set_target_properties(${_name} PROPERTIES SOVERSION "1")
+    if (MSVC)
+    install(TARGETS ${_name} 
+	        LIBRARY DESTINATION bin
+			ARCHIVE DESTINATION bin
+            RUNTIME DESTINATION bin)
+    else()
+    install(TARGETS ${_name} 
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin)
+    endif()
+endfunction()
+
+add_module(compact8_acceptor-fst MODULE
+  compact8_acceptor-fst.cc)
+ 
+add_module(compact8_string-fst MODULE
+  compact8_string-fst.cc)
+ 
+add_module(compact8_unweighted-fst MODULE
+  compact8_unweighted-fst.cc)
+ 
+add_module(compact8_unweighted_acceptor-fst MODULE
+  compact8_unweighted_acceptor-fst.cc)
+ 
+add_module(compact8_weighted_string-fst MODULE
+  compact8_weighted_string-fst.cc)
+ 
+add_module(compact16_acceptor-fst MODULE
+  compact16_acceptor-fst.cc)
+ 
+add_module(compact16_string-fst MODULE
+  compact16_string-fst.cc)
+ 
+add_module(compact16_unweighted-fst MODULE
+  compact16_unweighted-fst.cc)
+ 
+add_module(compact16_unweighted_acceptor-fst MODULE
+  compact16_unweighted_acceptor-fst.cc)
+ 
+add_module(compact16_weighted_string-fst MODULE
+  compact16_weighted_string-fst.cc)
+ 
+add_module(compact64_acceptor-fst MODULE
+  compact64_acceptor-fst.cc)
+ 
+add_module(compact64_string-fst MODULE
+  compact64_string-fst.cc)
+ 
+add_module(compact64_unweighted-fst MODULE
+  compact64_unweighted-fst.cc)
+ 
+add_module(compact64_unweighted_acceptor-fst MODULE
+  compact64_unweighted_acceptor-fst.cc)
+ 
+add_module(compact64_weighted_string-fst MODULE
+  compact64_weighted_string-fst.cc)
+
diff --git a/src/extensions/compress/CMakeLists.txt b/src/extensions/compress/CMakeLists.txt
new file mode 100644
index 0000000..028cd76
--- /dev/null
+++ b/src/extensions/compress/CMakeLists.txt
@@ -0,0 +1,59 @@
+
+add_library(fstcompressscript
+  compressscript.cc
+ )
+if (MSVC)
+  target_link_libraries(fstcompressscript
+    fstscript
+    fst
+  )
+GENERATE_EXPORT_HEADER( fstcompressscript
+             BASE_NAME fstcompressscript
+             EXPORT_MACRO_NAME fstcompressscript_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstcompressscript_Export.h
+             STATIC_DEFINE fstcompressscript_BUILT_AS_STATIC
+)
+target_compile_definitions(fstcompressscript PRIVATE fstcompressscript_EXPORTS)
+target_include_directories(fstcompressscript PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+else()
+  target_link_libraries(fstcompressscript
+    fstscript
+    fst
+  )
+endif()
+set_target_properties(fstcompressscript PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+install(TARGETS fstcompressscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+ )
+
+if(HAVE_BIN)
+  add_executable(fstcompress
+    fstcompress.cc
+    fstcompress-main.cc)
+
+    if (MSVC)
+      target_link_libraries(fstcompress
+        fstcompressscript
+        fstscript
+        fst
+      )
+    else()
+      target_link_libraries(fstcompress
+        fstcompressscript
+        fstscript
+        fst
+        ${CMAKE_DL_LIBS}
+      )
+    endif()
+
+  install(TARGETS fstcompress
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin
+		)
+endif(HAVE_BIN)
\ No newline at end of file
diff --git a/src/extensions/const/CMakeLists.txt b/src/extensions/const/CMakeLists.txt
new file mode 100644
index 0000000..1f041b2
--- /dev/null
+++ b/src/extensions/const/CMakeLists.txt
@@ -0,0 +1,49 @@
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+    endif()
+
+    if (MSVC)
+    install(TARGETS ${_name} 
+	        LIBRARY DESTINATION bin
+			ARCHIVE DESTINATION bin
+            RUNTIME DESTINATION bin)
+    else()
+    install(TARGETS ${_name} 
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin)
+    endif()
+endfunction()
+
+
+add_module(const8-fst MODULE const8-fst.cc)
+
+add_module(const16-fst MODULE const16-fst.cc)
+
+add_module(const64-fst MODULE const64-fst.cc)
+
+add_library(fstconst 
+  const8-fst.cc 
+  const16-fst.cc 
+  const64-fst.cc)
+target_link_libraries(fstconst fst)
+set_target_properties(fstconst PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+GENERATE_EXPORT_HEADER( fstconst
+             BASE_NAME fstconst
+             EXPORT_MACRO_NAME fstconst_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstconst_Export.h
+             STATIC_DEFINE fstconst_BUILT_AS_STATIC
+)
+target_compile_definitions(fstconst PRIVATE fstconst_EXPORTS)
+target_include_directories(fstconst PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+
+install(TARGETS fstconst 
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+ )
\ No newline at end of file
diff --git a/src/extensions/far/CMakeLists.txt b/src/extensions/far/CMakeLists.txt
new file mode 100644
index 0000000..e37ce8f
--- /dev/null
+++ b/src/extensions/far/CMakeLists.txt
@@ -0,0 +1,77 @@
+
+add_library(fstfar
+  sttable.cc
+  stlist.cc
+)
+target_link_libraries(fstfar fst)
+set_target_properties(fstfar PROPERTIES 
+  SOVERSION "${SOVERSION}"
+  FOLDER far
+)
+GENERATE_EXPORT_HEADER( fstfar
+             BASE_NAME fstfar
+             EXPORT_MACRO_NAME fstfar_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstfar_Export.h
+             STATIC_DEFINE fstfar_BUILT_AS_STATIC
+)
+target_compile_definitions(fstfar PRIVATE fstfar_EXPORTS)
+target_include_directories(fstfar PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+
+install(TARGETS fstfar
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+
+if(HAVE_SCRIPT)
+  add_library(fstfarscript
+    compile-strings.cc 
+    far-class.cc 
+    farscript.cc
+    getters.cc 
+    script-impl.cc
+  )
+  if (MSVC)
+GENERATE_EXPORT_HEADER( fstfarscript
+             BASE_NAME fstfarscript
+             EXPORT_MACRO_NAME fstfarscript_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstfarscript_Export.h
+             STATIC_DEFINE fstfarscript_BUILT_AS_STATIC
+)
+target_compile_definitions(fstfarscript PRIVATE fstfarscript_EXPORTS)
+target_include_directories(fstfarscript PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+  endif()
+    target_link_libraries(fstfarscript fstfar fstscript fst ${CMAKE_DL_LIBS})
+  set_target_properties(fstfarscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+  )
+
+  install(TARGETS fstfarscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+  )
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  function (add_executable2 _name)
+      add_executable(${ARGV})
+      if (TARGET ${_name})
+        target_link_libraries(${_name} fstfarscript fstscript fst ${CMAKE_DL_LIBS})
+      endif()
+      install(TARGETS ${_name} RUNTIME DESTINATION bin)
+  endfunction()
+
+  add_executable2(farcompilestrings farcompilestrings.cc farcompilestrings-main.cc)
+  add_executable2(farcreate  farcreate.cc farcreate-main.cc)
+  add_executable2(farconvert  farconvert.cc farconvert-main.cc)
+  add_executable2(farencode  farencode.cc farencode-main.cc)
+  add_executable2(farequal  farequal.cc farequal-main.cc)
+  add_executable2(farextract  farextract.cc farextract-main.cc)
+  add_executable2(farinfo  farinfo.cc farinfo-main.cc)
+  add_executable2(farisomorphic  farisomorphic.cc  farisomorphic-main.cc)
+  add_executable2(farprintstrings  farprintstrings.cc farprintstrings-main.cc)
+endif(HAVE_BIN)
+
diff --git a/src/extensions/far/compile-strings.cc b/src/extensions/far/compile-strings.cc
index 334c3d9..8d2a15a 100644
--- a/src/extensions/far/compile-strings.cc
+++ b/src/extensions/far/compile-strings.cc
@@ -22,8 +22,10 @@
 #include <fst/extensions/far/compile-strings.h>
 #include <fstream>
 
+#include <fst/exports/exports.h>
+
 DEFINE_string(far_field_separator, "\t",
-              "Set of characters used as a separator between printed fields");
+            "Set of characters used as a separator between printed fields");
 
 namespace fst {
 namespace internal {
@@ -32,7 +34,7 @@ namespace internal {
 // number, or zero if the number of lines could not be determined because the
 // file was not seekable.
 int KeySize(const std::string &source) {
-  std::ifstream istrm(source);
+  std::ifstream istrm(source, std::ios_base::in | std::ios_base::binary);
   istrm.seekg(0);
   // TODO(jrosenstock): Change this to is_regular_file when <filesystem> is
   // no longer banned.
diff --git a/src/extensions/far/far-class.cc b/src/extensions/far/far-class.cc
index 4a2da9b..42a3237 100644
--- a/src/extensions/far/far-class.cc
+++ b/src/extensions/far/far-class.cc
@@ -22,7 +22,7 @@
 
 #include <fst/extensions/far/script-impl.h>
 #include <fst/arc.h>
-#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -56,11 +56,6 @@ std::unique_ptr<FarReaderClass> FarReaderClass::Open(
   return std::move(args.retval);
 }
 
-REGISTER_FST_OPERATION(OpenFarReaderClass, StdArc, OpenFarReaderClassArgs);
-REGISTER_FST_OPERATION(OpenFarReaderClass, LogArc, OpenFarReaderClassArgs);
-REGISTER_FST_OPERATION(OpenFarReaderClass, Log64Arc, OpenFarReaderClassArgs);
-REGISTER_FST_OPERATION(OpenFarReaderClass, ErrorArc, OpenFarReaderClassArgs);
-
 // FarWriterClass.
 
 std::unique_ptr<FarWriterClass> FarWriterClass::Create(
@@ -73,12 +68,18 @@ std::unique_ptr<FarWriterClass> FarWriterClass::Create(
   return std::move(args.retval);
 }
 
+REGISTER_FST_OPERATION(OpenFarReaderClass, StdArc, OpenFarReaderClassArgs);
+REGISTER_FST_OPERATION(OpenFarReaderClass, LogArc, OpenFarReaderClassArgs);
+REGISTER_FST_OPERATION(OpenFarReaderClass, Log64Arc, OpenFarReaderClassArgs);
+REGISTER_FST_OPERATION(OpenFarReaderClass, ErrorArc, OpenFarReaderClassArgs);
 REGISTER_FST_OPERATION(CreateFarWriterClass, StdArc, CreateFarWriterClassArgs);
 REGISTER_FST_OPERATION(CreateFarWriterClass, LogArc, CreateFarWriterClassArgs);
 REGISTER_FST_OPERATION(CreateFarWriterClass, Log64Arc,
-                       CreateFarWriterClassArgs);
+    CreateFarWriterClassArgs);
 REGISTER_FST_OPERATION(CreateFarWriterClass, ErrorArc,
-                       CreateFarWriterClassArgs);
+    CreateFarWriterClassArgs);
+
+
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/extensions/far/farcompilestrings-main.cc b/src/extensions/far/farcompilestrings-main.cc
index c16146d..d501d37 100644
--- a/src/extensions/far/farcompilestrings-main.cc
+++ b/src/extensions/far/farcompilestrings-main.cc
@@ -21,6 +21,11 @@
 #include <memory>
 #include <string>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#include <iostream>
+#endif
 
 #include <fst/flags.h>
 #include <fst/extensions/far/farscript.h>
@@ -58,7 +63,7 @@ int farcompilestrings_main(int argc, char **argv) {
   std::vector<std::string> sources;
   if (FST_FLAGS_file_list_input) {
     for (int i = 1; i < argc - 1; ++i) {
-      std::ifstream istrm(argv[i]);
+      std::ifstream istrm(argv[i], std::ios_base::in | std::ios_base::binary);
       std::string str;
       while (std::getline(istrm, str)) sources.push_back(str);
     }
@@ -75,7 +80,6 @@ int farcompilestrings_main(int argc, char **argv) {
   // argc <= 2 means the file (if any) is an input file, so write to stdout.
   const std::string out_far =
       argc > 2 && strcmp(argv[argc - 1], "-") != 0 ? argv[argc - 1] : "";
-
   fst::FarEntryType entry_type;
   if (!s::GetFarEntryType(FST_FLAGS_entry_type, &entry_type)) {
     LOG(ERROR) << "Unknown or unsupported FAR entry type: "
diff --git a/src/extensions/far/farscript.cc b/src/extensions/far/farscript.cc
index 4114f02..9004866 100644
--- a/src/extensions/far/farscript.cc
+++ b/src/extensions/far/farscript.cc
@@ -59,15 +59,12 @@ void CompileStrings(const std::vector<std::string> &sources,
                                           &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(CompileStrings, FarCompileStringsArgs);
-
 void Convert(FarReaderClass &reader, FarWriterClass &writer,
              std::string_view fst_type) {
   FarConvertArgs args{reader, writer, fst_type};
   Apply<Operation<FarConvertArgs>>("Convert", reader.ArcType(), &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(Convert, FarConvertArgs);
 
 void Create(const std::vector<std::string> &sources, FarWriterClass &writer,
             const int32_t generate_keys, const std::string &key_prefix,
@@ -76,7 +73,7 @@ void Create(const std::vector<std::string> &sources, FarWriterClass &writer,
   Apply<Operation<FarCreateArgs>>("Create", writer.ArcType(), &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(Create, FarCreateArgs);
+
 
 void Decode(FarReaderClass &reader, FarWriterClass &writer,
             const EncodeMapperClass &encoder) {
@@ -88,7 +85,6 @@ void Decode(FarReaderClass &reader, FarWriterClass &writer,
   Apply<Operation<FarDecodeArgs>>("Decode", reader.ArcType(), &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(Decode, FarDecodeArgs);
 
 void Encode(FarReaderClass &reader, FarWriterClass &writer,
             EncodeMapperClass *encoder) {
@@ -100,7 +96,6 @@ void Encode(FarReaderClass &reader, FarWriterClass &writer,
   Apply<Operation<FarEncodeArgs>>("Encode", reader.ArcType(), &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(Encode, FarEncodeArgs);
 
 bool Equal(FarReaderClass &reader1, FarReaderClass &reader2, float delta,
            std::string_view begin_key, std::string_view end_key) {
@@ -111,7 +106,6 @@ bool Equal(FarReaderClass &reader1, FarReaderClass &reader2, float delta,
   return args_with_retval.retval;
 }
 
-REGISTER_FST_OPERATION_4ARCS(Equal, FarEqualArgs);
 
 void Extract(FarReaderClass &reader, int32_t generate_sources,
              const std::string &keys, const std::string &key_separator,
@@ -124,8 +118,6 @@ void Extract(FarReaderClass &reader, int32_t generate_sources,
   Apply<Operation<FarExtractArgs>>("Extract", reader.ArcType(), &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(Extract, FarExtractArgs);
-
 void GetInfo(const std::vector<std::string> &sources,
              const std::string &arc_type, const std::string &begin_key,
              const std::string &end_key, bool list_fsts, FarInfoData *data) {
@@ -133,7 +125,6 @@ void GetInfo(const std::vector<std::string> &sources,
   Apply<Operation<FarGetInfoArgs>>("GetInfo", arc_type, &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(GetInfo, FarGetInfoArgs);
 
 void Info(const std::vector<std::string> &sources, const std::string &arc_type,
           const std::string &begin_key, const std::string &end_key,
@@ -142,7 +133,6 @@ void Info(const std::vector<std::string> &sources, const std::string &arc_type,
   Apply<Operation<FarInfoArgs>>("Info", arc_type, &args);
 }
 
-REGISTER_FST_OPERATION_4ARCS(Info, FarInfoArgs);
 
 bool Isomorphic(FarReaderClass &reader1, FarReaderClass &reader2, float delta,
                 std::string_view begin_key, std::string_view end_key) {
@@ -154,8 +144,6 @@ bool Isomorphic(FarReaderClass &reader1, FarReaderClass &reader2, float delta,
   return args_with_retval.retval;
 }
 
-REGISTER_FST_OPERATION_4ARCS(Isomorphic, FarIsomorphicArgs);
-
 void PrintStrings(FarReaderClass &reader, const FarEntryType entry_type,
                   const TokenType token_type, const std::string &begin_key,
                   const std::string &end_key, bool print_key, bool print_weight,
@@ -171,7 +159,19 @@ void PrintStrings(FarReaderClass &reader, const FarEntryType entry_type,
                                         &args);
 }
 
+REGISTER_FST_OPERATION_4ARCS(CompileStrings, FarCompileStringsArgs);
+REGISTER_FST_OPERATION_4ARCS(Convert, FarConvertArgs);
+REGISTER_FST_OPERATION_4ARCS(Create, FarCreateArgs);
+REGISTER_FST_OPERATION_4ARCS(Decode, FarDecodeArgs);
+REGISTER_FST_OPERATION_4ARCS(Encode, FarEncodeArgs);
+REGISTER_FST_OPERATION_4ARCS(Equal, FarEqualArgs);
+REGISTER_FST_OPERATION_4ARCS(Extract, FarExtractArgs);
+
+REGISTER_FST_OPERATION_4ARCS(GetInfo, FarGetInfoArgs);
+REGISTER_FST_OPERATION_4ARCS(Info, FarInfoArgs);
+REGISTER_FST_OPERATION_4ARCS(Isomorphic, FarIsomorphicArgs);
 REGISTER_FST_OPERATION_4ARCS(PrintStrings, FarPrintStringsArgs);
 
+
 }  // namespace script
 }  // namespace fst
diff --git a/src/extensions/far/sttable.cc b/src/extensions/far/sttable.cc
index 3422154..371cd74 100644
--- a/src/extensions/far/sttable.cc
+++ b/src/extensions/far/sttable.cc
@@ -25,7 +25,7 @@
 namespace fst {
 
 bool IsSTTable(const std::string &source) {
-  std::ifstream strm(source);
+  std::ifstream strm(source, std::ios_base::in | std::ios_base::binary);
   if (!strm.good()) return false;
 
   int32_t magic_number = 0;
diff --git a/src/extensions/linear/CMakeLists.txt b/src/extensions/linear/CMakeLists.txt
new file mode 100644
index 0000000..6a5ecfd
--- /dev/null
+++ b/src/extensions/linear/CMakeLists.txt
@@ -0,0 +1,88 @@
+
+
+if(HAVE_SCRIPT)
+  add_library(fstlinearscript
+    linearscript.cc
+  )
+  set_target_properties(fstlinearscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+  )
+    target_link_libraries(fstlinearscript
+      fstscript
+      fst
+    )
+  if (MSVC)
+GENERATE_EXPORT_HEADER( fstlinearscript
+             BASE_NAME fstlinearscript
+             EXPORT_MACRO_NAME fstlinearscript_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstlinearscript_Export.h
+             STATIC_DEFINE fstlinearscript_BUILT_AS_STATIC
+)
+target_compile_definitions(fstlinearscript PRIVATE fstlinearscript_EXPORTS)
+target_include_directories(fstlinearscript PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+    install(TARGETS fstlinearscript
+    LIBRARY DESTINATION bin
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin
+    )
+  else()
+    install(TARGETS fstlinearscript
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+    RUNTIME DESTINATION bin
+    )
+  endif()
+  
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  add_executable(fstlinear
+    fstlinear.cc 
+    fstlinear-main.cc)
+    target_link_libraries(fstlinear
+      fstlinearscript
+      fstscript 
+      fst
+      ${CMAKE_DL_LIBS}
+    )
+
+  add_executable(fstloglinearapply
+    fstloglinearapply.cc 
+    fstloglinearapply-main.cc)
+  target_link_libraries(fstloglinearapply
+    fstlinearscript
+    fstscript 
+    fst
+    ${CMAKE_DL_LIBS}
+  )
+  install(TARGETS fstlinear fstloglinearapply
+    RUNTIME DESTINATION bin
+  )
+endif(HAVE_BIN)
+
+
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+    endif()
+
+    if (MSVC)
+      install(TARGETS ${_name}
+      LIBRARY DESTINATION bin
+      ARCHIVE DESTINATION bin
+      RUNTIME DESTINATION bin)
+    else()
+      install(TARGETS ${_name}
+      LIBRARY DESTINATION lib
+      ARCHIVE DESTINATION lib
+      RUNTIME DESTINATION bin)
+    endif()
+endfunction()
+
+add_module(linear-tagger-fst MODULE
+  linear-tagger-fst.cc)
+
+add_module(linear-classifier-fst MODULE
+  linear-classifier-fst.cc)
diff --git a/src/extensions/linear/linear-tagger-fst.cc b/src/extensions/linear/linear-tagger-fst.cc
index 17a44ec..e7c9240 100644
--- a/src/extensions/linear/linear-tagger-fst.cc
+++ b/src/extensions/linear/linear-tagger-fst.cc
@@ -22,5 +22,6 @@ using fst::LinearTaggerFst;
 using fst::LogArc;
 using fst::StdArc;
 
+
 REGISTER_FST(LinearTaggerFst, StdArc);
-REGISTER_FST(LinearTaggerFst, LogArc);
+REGISTER_FST(LinearTaggerFst, LogArc);;
diff --git a/src/extensions/linear/linearscript.cc b/src/extensions/linear/linearscript.cc
index 141a2f2..b63e7f2 100644
--- a/src/extensions/linear/linearscript.cc
+++ b/src/extensions/linear/linearscript.cc
@@ -29,10 +29,10 @@
 #include <fst/script/script-impl.h>
 
 DEFINE_string(delimiter, "|",
-              "Single non-white-space character delimiter inside sequences of "
-              "feature symbols and output symbols");
+            "Single non-white-space character delimiter inside sequences of "
+            "feature symbols and output symbols");
 DEFINE_string(empty_symbol, "<empty>",
-              "Special symbol that designates an empty sequence");
+            "Special symbol that designates an empty sequence");
 
 DEFINE_string(start_symbol, "<s>", "Start of sentence symbol");
 DEFINE_string(end_symbol, "</s>", "End of sentence symbol");
@@ -82,7 +82,7 @@ void SplitByWhitespace(const std::string &str, std::vector<std::string> *out) {
 int ScanNumClasses(char **models, int models_len) {
   std::set<std::string> preds;
   for (int i = 0; i < models_len; ++i) {
-    std::ifstream in(models[i]);
+    std::ifstream in(models[i], std::ios_base::in | std::ios_base::binary);
     if (!in) LOG(FATAL) << "Failed to open " << models[i];
     std::string line;
     std::getline(in, line);
diff --git a/src/extensions/lookahead/CMakeLists.txt b/src/extensions/lookahead/CMakeLists.txt
new file mode 100644
index 0000000..e265acc
--- /dev/null
+++ b/src/extensions/lookahead/CMakeLists.txt
@@ -0,0 +1,43 @@
+add_library(fstlookahead
+  arc_lookahead-fst.cc 
+  ilabel_lookahead-fst.cc
+  olabel_lookahead-fst.cc
+)
+target_link_libraries(fstlookahead fst)
+set_target_properties(fstlookahead PROPERTIES 
+  SOVERSION "${SOVERSION}"
+)
+
+install(TARGETS fstlookahead 
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+  
+function (add_module _name)
+    add_library(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} fst)
+    endif()
+
+    if (MSVC)
+    install(TARGETS ${_name} 
+	        LIBRARY DESTINATION bin
+			ARCHIVE DESTINATION bin
+            RUNTIME DESTINATION bin)
+    else()
+    install(TARGETS ${_name} 
+	        LIBRARY DESTINATION lib
+			ARCHIVE DESTINATION lib
+            RUNTIME DESTINATION bin)
+    endif()
+endfunction()
+  
+add_module(arc_lookahead-fst MODULE
+  arc_lookahead-fst.cc)
+ 
+add_module(ilabel_lookahead-fst MODULE
+  ilabel_lookahead-fst.cc)
+
+add_module(olabel_lookahead-fst MODULE
+  olabel_lookahead-fst.cc)
\ No newline at end of file
diff --git a/src/extensions/mpdt/CMakeLists.txt b/src/extensions/mpdt/CMakeLists.txt
new file mode 100644
index 0000000..ef89f17
--- /dev/null
+++ b/src/extensions/mpdt/CMakeLists.txt
@@ -0,0 +1,38 @@
+
+if(HAVE_SCRIPT)
+  add_library(fstmpdtscript mpdtscript.cc)
+    target_link_libraries(fstmpdtscript fstscript fst)
+  if (MSVC)
+GENERATE_EXPORT_HEADER( fstmpdtscript
+             BASE_NAME fstmpdtscript
+             EXPORT_MACRO_NAME fstmpdtscript_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstmpdtscript_Export.h
+             STATIC_DEFINE fstmpdtscript_BUILT_AS_STATIC
+)
+target_compile_definitions(fstmpdtscript PUBLIC fstmpdtscript_EXPORTS)
+target_include_directories(fstmpdtscript PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+  endif()
+  set_target_properties(fstmpdtscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+  )
+  install(TARGETS fstmpdtscript 
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+  )
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  function (add_executable2 _name)
+      add_executable(${ARGV})
+      if (TARGET ${_name})
+          target_link_libraries(${_name} fstmpdtscript fstpdtscript fstscript fst ${CMAKE_DL_LIBS})
+      endif()
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+  endfunction()
+  add_executable2(mpdtcompose  mpdtcompose.cc mpdtcompose-main.cc)
+  add_executable2(mpdtexpand  mpdtexpand.cc mpdtexpand-main.cc)
+  add_executable2(mpdtinfo  mpdtinfo.cc mpdtinfo-main.cc)
+  add_executable2(mpdtreverse  mpdtreverse.cc mpdtreverse-main.cc)
+endif(HAVE_BIN)
\ No newline at end of file
diff --git a/src/extensions/ngram/CMakeLists.txt b/src/extensions/ngram/CMakeLists.txt
new file mode 100644
index 0000000..206f3c9
--- /dev/null
+++ b/src/extensions/ngram/CMakeLists.txt
@@ -0,0 +1,54 @@
+
+add_library(fstngram
+    bitmap-index.cc 
+    ngram-fst.cc 
+    nthbit.cc
+)
+
+target_link_libraries(fstngram
+    fst
+)
+GENERATE_EXPORT_HEADER( fstngram
+             BASE_NAME fstngram
+             EXPORT_MACRO_NAME fstngram_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstngram_Export.h
+             STATIC_DEFINE fstngram_BUILT_AS_STATIC
+)
+target_compile_definitions(fstngram PRIVATE fstngram_EXPORTS)
+target_include_directories(fstngram PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+
+set_target_properties(fstngram PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+
+install(TARGETS fstngram 
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+
+add_library(ngram_fst MODULE
+    bitmap-index.cc 
+    ngram-fst.cc 
+    nthbit.cc
+)
+
+target_link_libraries(ngram_fst
+    fst
+)
+target_compile_definitions(ngram_fst PRIVATE fstngram_EXPORTS)
+target_include_directories(ngram_fst PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+
+if (MSVC)
+install(TARGETS ${_name} 
+        LIBRARY DESTINATION bin
+        ARCHIVE DESTINATION bin
+        RUNTIME DESTINATION bin)
+else()
+install(TARGETS ${_name} 
+        LIBRARY DESTINATION lib
+        ARCHIVE DESTINATION lib
+        RUNTIME DESTINATION bin)
+endif()
\ No newline at end of file
diff --git a/src/extensions/ngram/bitmap-index.cc b/src/extensions/ngram/bitmap-index.cc
index 2d11dc5..0d68c57 100644
--- a/src/extensions/ngram/bitmap-index.cc
+++ b/src/extensions/ngram/bitmap-index.cc
@@ -21,6 +21,7 @@
 #include <cstdint>
 #include <iterator>
 
+#include <fst/compat.h>
 #include <fst/log.h>
 #include <fst/extensions/ngram/nthbit.h>
 
@@ -43,7 +44,7 @@ size_t BitmapIndex::Rank1(size_t end) const {
   // this depend on whether there's a popcnt instruction?
   if (bit_index == 0) return sum;  // Entire answer is in the index.
   const uint64_t mask = (uint64_t{1} << bit_index) - 1;
-  return sum + __builtin_popcountll(bits_[end_word] & mask);
+  return sum + popcountll(bits_[end_word] & mask);
 }
 
 size_t BitmapIndex::Select1(size_t bit_index) const {
@@ -201,7 +202,7 @@ std::pair<size_t, size_t> BitmapIndex::Select0s(size_t bit_index) const {
   // If this is 0, then the next zero is not in the same word.
   if (masked_inv_word != 0) {
     // We can't ctz on 0, but we already checked that.
-    const int next_nth = __builtin_ctzll(masked_inv_word);
+    const int next_nth = ctzll(masked_inv_word);
     return {kStorageBitSize * word_index + nth,
             kStorageBitSize * word_index + next_nth};
   } else {
@@ -306,7 +307,7 @@ void BitmapIndex::BuildIndex(const uint64_t* bits, size_t num_bits,
 
     // We can assume that the last word has zeros in the high bits.
     const uint64_t word = bits[word_index];
-    const int word_ones_count = __builtin_popcountll(word);
+    const int word_ones_count = popcountll(word);
     const uint32_t bit_offset = kStorageBitSize * word_index;
 
     if (enable_select_0_index) {
diff --git a/src/extensions/ngram/nthbit.cc b/src/extensions/ngram/nthbit.cc
index fdbf304..a716ef3 100644
--- a/src/extensions/ngram/nthbit.cc
+++ b/src/extensions/ngram/nthbit.cc
@@ -235,7 +235,7 @@ static const uint8_t nth_bit_bit_pos[8][256] = {
 uint32_t nth_bit(const uint64_t v, uint32_t r) {
   DCHECK_NE(v, 0);
   DCHECK_LE(0, r);
-  DCHECK_LT(r, __builtin_popcountll(v));
+  DCHECK_LT(r, popcountll(v));
 
   uint32_t next_byte = v & 255;
   uint32_t byte_popcount = nth_bit_bit_count[next_byte];
diff --git a/src/extensions/pdt/CMakeLists.txt b/src/extensions/pdt/CMakeLists.txt
new file mode 100644
index 0000000..10c5907
--- /dev/null
+++ b/src/extensions/pdt/CMakeLists.txt
@@ -0,0 +1,44 @@
+
+
+if(HAVE_SCRIPT)
+  add_library(fstpdtscript getters.cc pdtscript.cc)
+    target_link_libraries(fstpdtscript fstscript fst)
+  if (MSVC)
+GENERATE_EXPORT_HEADER( fstpdtscript
+             BASE_NAME fstpdtscript
+             EXPORT_MACRO_NAME fstpdtscript_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstpdtscript_Export.h
+             STATIC_DEFINE fstpdtscript_BUILT_AS_STATIC
+)
+target_compile_definitions(fstpdtscript PRIVATE fstpdtscript_EXPORTS)
+target_include_directories(fstpdtscript PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+  endif()
+  set_target_properties(fstpdtscript PROPERTIES 
+    SOVERSION "${SOVERSION}"
+  )
+
+  install(TARGETS fstpdtscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin
+  )
+endif(HAVE_SCRIPT)
+
+if(HAVE_BIN)
+  function (add_executable2 _name)
+      add_executable(${ARGV})
+      if (TARGET ${_name})
+          target_link_libraries(${_name} fstpdtscript fstscript fst ${CMAKE_DL_LIBS})
+          
+      endif()
+      install(TARGETS ${_name} RUNTIME DESTINATION bin)
+  endfunction()
+
+  add_executable2(pdtcompose  pdtcompose.cc pdtcompose-main.cc)
+  add_executable2(pdtexpand  pdtexpand.cc pdtexpand-main.cc)
+  add_executable2(pdtinfo  pdtinfo.cc pdtinfo-main.cc)
+  add_executable2(pdtreplace  pdtreplace.cc pdtreplace-main.cc)
+  add_executable2(pdtreverse  pdtreverse.cc pdtreverse-main.cc)
+  add_executable2(pdtshortestpath  pdtshortestpath.cc pdtshortestpath-main.cc)
+endif(HAVE_BIN)
\ No newline at end of file
diff --git a/src/extensions/python/CMakeLists.txt b/src/extensions/python/CMakeLists.txt
new file mode 100644
index 0000000..83b9a7f
--- /dev/null
+++ b/src/extensions/python/CMakeLists.txt
@@ -0,0 +1,22 @@
+
+add_library(pywrapfst
+    pywrapfst.cpp
+)
+
+target_link_libraries(pywrapfst
+    fst
+    fstfarscript
+    fstfar
+    fstscript
+)
+
+set_target_properties(pywrapfst PROPERTIES
+  SOVERSION "${SOVERSION}"
+  FOLDER python
+)
+
+install(TARGETS pywrapfst 
+	LIBRARY DESTINATION lib
+	ARCHIVE DESTINATION lib
+	RUNTIME DESTINATION lib
+)
\ No newline at end of file
diff --git a/src/extensions/special/CMakeLists.txt b/src/extensions/special/CMakeLists.txt
new file mode 100644
index 0000000..42c72d1
--- /dev/null
+++ b/src/extensions/special/CMakeLists.txt
@@ -0,0 +1,47 @@
+
+
+add_library(fstspecial
+  phi-fst.cc
+  rho-fst.cc
+  sigma-fst.cc
+)
+GENERATE_EXPORT_HEADER( fstspecial
+             BASE_NAME fstspecial
+             EXPORT_MACRO_NAME fstspecial_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstspecial_Export.h
+             STATIC_DEFINE fstspecial_BUILT_AS_STATIC
+)
+target_compile_definitions(fstspecial PRIVATE fstspecial_EXPORTS)
+target_include_directories(fstspecial PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+
+set_target_properties(fstspecial PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+target_link_libraries(fstspecial
+  fst
+)
+
+if(HAVE_BIN)
+  add_executable(fstspecialconvert
+    ../../bin/fstconvert.cc 
+    ../../bin/fstconvert-main.cc
+  )
+
+  set_target_properties(fstspecialconvert PROPERTIES 
+    OUTPUT_NAME fstspecialconvert
+  )
+  target_link_libraries(fstspecialconvert
+  fstspecial
+    fstscript
+    fst
+    ${CMAKE_DL_LIBS}
+  )
+endif(HAVE_BIN)
+
+
+install(TARGETS fstspecial fstspecialconvert
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
diff --git a/src/include/fst/cache.h b/src/include/fst/cache.h
index 58a022c..8512901 100644
--- a/src/include/fst/cache.h
+++ b/src/include/fst/cache.h
@@ -31,11 +31,12 @@
 #include <fst/log.h>
 
 #include <fst/vector-fst.h>
+#include <fst/exports/exports.h>
 
 #include <unordered_map>
 
-DECLARE_bool(fst_default_cache_gc);
-DECLARE_int64(fst_default_cache_gc_limit);
+DECLARE_export_bool(fst_default_cache_gc, fst_EXPORT);
+DECLARE_export_int64(fst_default_cache_gc_limit, fst_EXPORT);
 
 namespace fst {
 
diff --git a/src/include/fst/compat.h b/src/include/fst/compat.h
index b7f2087..445da91 100644
--- a/src/include/fst/compat.h
+++ b/src/include/fst/compat.h
@@ -31,6 +31,7 @@
 #include <type_traits>
 #include <utility>
 #include <vector>
+#include <fst/exports/exports.h>
 
 #if defined(__GNUC__) || defined(__clang__)
 #define OPENFST_DEPRECATED(message) __attribute__((deprecated(message)))
@@ -40,7 +41,28 @@
 #define OPENFST_DEPRECATED(message)
 #endif
 
-void FailedNewHandler();
+void fst_EXPORT FailedNewHandler();
+
+#ifdef _WIN32
+
+  inline uint64_t ctzll(uint64_t input_int) {
+    return  _tzcnt_u64(input_int);
+  }
+
+  inline uint64_t popcountll(uint64_t input_int) {
+    return  __popcnt64(input_int);
+  }
+#else
+  inline uint64_t ctzll(uint64_t input_int) {
+    return  __builtin_ctzll(input_int);
+  }
+
+  inline uint64_t popcountll(uint64_t input_int) {
+    return  __builtin_popcountll(input_int);
+  }
+
+
+#endif
 
 namespace fst {
 
@@ -84,6 +106,7 @@ constexpr To implicit_cast(typename internal::type_identity_t<To> to) {
   return to;
 }
 
+class fst_EXPORT CheckSummer;
 // Checksums.
 class CheckSummer {
  public:
@@ -208,6 +231,7 @@ struct ByAnyChar {
 
 namespace internal {
 
+    class fst_EXPORT StringSplitter;
 class StringSplitter {
  public:
   using const_iterator = std::vector<std::string_view>::const_iterator;
@@ -248,15 +272,17 @@ class StringSplitter {
 // `StrSplit` replacements. Only support splitting on `char` or
 // `ByAnyChar` (notable not on a multi-char string delimiter), and with or
 // without `SkipEmpty`.
-internal::StringSplitter StrSplit(std::string_view full, ByAnyChar delim);
-internal::StringSplitter StrSplit(std::string_view full, char delim);
-internal::StringSplitter StrSplit(std::string_view full, ByAnyChar delim,
+internal::StringSplitter fst_EXPORT StrSplit(std::string_view full, ByAnyChar delim);
+internal::StringSplitter fst_EXPORT StrSplit(std::string_view full, char delim);
+internal::StringSplitter fst_EXPORT StrSplit(std::string_view full, ByAnyChar delim,
                                   SkipEmpty);
-internal::StringSplitter StrSplit(std::string_view full, char delim, SkipEmpty);
+internal::StringSplitter fst_EXPORT StrSplit(std::string_view full, char delim, SkipEmpty);
+
+void fst_EXPORT StripTrailingAsciiWhitespace(std::string *full);
 
-void StripTrailingAsciiWhitespace(std::string *full);
+std::string_view fst_EXPORT StripTrailingAsciiWhitespace(std::string_view full);
 
-std::string_view StripTrailingAsciiWhitespace(std::string_view full);
+class fst_EXPORT StringOrInt;
 
 class StringOrInt {
  public:
@@ -276,21 +302,21 @@ class StringOrInt {
 
 // TODO(kbg): Make this work with variadic template, maybe.
 
-inline std::string StrCat(const StringOrInt &s1, const StringOrInt &s2) {
+inline std::string fst_EXPORT StrCat(const StringOrInt &s1, const StringOrInt &s2) {
   return s1.Get() + s2.Get();
 }
 
-inline std::string StrCat(const StringOrInt &s1, const StringOrInt &s2,
+inline std::string fst_EXPORT StrCat(const StringOrInt &s1, const StringOrInt &s2,
                           const StringOrInt &s3) {
   return s1.Get() + StrCat(s2, s3);
 }
 
-inline std::string StrCat(const StringOrInt &s1, const StringOrInt &s2,
+inline std::string fst_EXPORT StrCat(const StringOrInt &s1, const StringOrInt &s2,
                           const StringOrInt &s3, const StringOrInt &s4) {
   return s1.Get() + StrCat(s2, s3, s4);
 }
 
-inline std::string StrCat(const StringOrInt &s1, const StringOrInt &s2,
+inline std::string fst_EXPORT StrCat(const StringOrInt &s1, const StringOrInt &s2,
                           const StringOrInt &s3, const StringOrInt &s4,
                           const StringOrInt &s5) {
   return s1.Get() + StrCat(s2, s3, s4, s5);
@@ -298,13 +324,13 @@ inline std::string StrCat(const StringOrInt &s1, const StringOrInt &s2,
 
 // TODO(agutkin): Remove this once we migrate to C++20, where `starts_with`
 // is available.
-inline bool StartsWith(std::string_view text, std::string_view prefix) {
+inline bool fst_EXPORT StartsWith(std::string_view text, std::string_view prefix) {
   return prefix.empty() ||
          (text.size() >= prefix.size() &&
           memcmp(text.data(), prefix.data(), prefix.size()) == 0);
 }
 
-inline bool ConsumePrefix(std::string_view *s, std::string_view expected) {
+inline bool fst_EXPORT ConsumePrefix(std::string_view *s, std::string_view expected) {
   if (!StartsWith(*s, expected)) return false;
   s->remove_prefix(expected.size());
   return true;
diff --git a/src/include/fst/encode.h b/src/include/fst/encode.h
index 62f7c09..437f0d5 100644
--- a/src/include/fst/encode.h
+++ b/src/include/fst/encode.h
@@ -56,6 +56,8 @@ inline constexpr int32_t kEncodeMagicNumber = 2128178506;
 
 }  // namespace internal
 
+class fst_EXPORT EncodeTableHeader;
+
 // Header for the encoder table.
 class EncodeTableHeader {
  public:
diff --git a/src/include/fst/error-weight.h b/src/include/fst/error-weight.h
index bc99b39..ae60615 100644
--- a/src/include/fst/error-weight.h
+++ b/src/include/fst/error-weight.h
@@ -20,12 +20,13 @@
 #include <string>
 
 #include <fst/util.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
 // A Weight that can never be instantiated. This is not a semi-ring.
 // It is used for the arc type of empty FAR files.
-struct ErrorWeight {
+struct fst_EXPORT ErrorWeight {
   using ReverseWeight = ErrorWeight;
 
   ErrorWeight() { FSTERROR() << "ErrorWeight::ErrorWeight called"; }
diff --git a/src/include/fst/expanded-fst.h b/src/include/fst/expanded-fst.h
index 24a21c5..a34c726 100644
--- a/src/include/fst/expanded-fst.h
+++ b/src/include/fst/expanded-fst.h
@@ -26,6 +26,11 @@
 #include <memory>
 #include <string>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/log.h>
 #include <fstream>
@@ -85,6 +90,9 @@ class ExpandedFst : public Fst<A> {
       }
       return Read(strm, FstReadOptions(source));
     } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       return Read(std::cin, FstReadOptions("standard input"));
     }
   }
@@ -158,6 +166,9 @@ class ImplToExpandedFst : public ImplToFst<Impl, FST> {
       }
       return Impl::Read(strm, FstReadOptions(source));
     } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       return Impl::Read(std::cin, FstReadOptions("standard input"));
     }
   }
diff --git a/src/include/fst/exports/exports.h b/src/include/fst/exports/exports.h
new file mode 100644
index 0000000..f9cb5e9
--- /dev/null
+++ b/src/include/fst/exports/exports.h
@@ -0,0 +1,34 @@
+
+#ifndef exports_H
+#define exports_H
+
+#ifdef _WIN32
+    #include <fst/exports/fst_Export.h>
+    #include <fst/exports/fstcompact_Export.h>
+    #include <fst/exports/fstcompressscript_Export.h>
+    #include <fst/exports/fstconst_Export.h>
+    #include <fst/exports/fstfarscript_Export.h>
+    #include <fst/exports/fstfar_Export.h>
+    #include <fst/exports/fstlinearscript_Export.h>
+    #include <fst/exports/fstmpdtscript_Export.h>
+    #include <fst/exports/fstngram_Export.h>
+    #include <fst/exports/fstpdtscript_Export.h>
+    #include <fst/exports/fstscript_Export.h>
+    #include <fst/exports/fstspecial_Export.h>
+#else
+
+    #define fst_EXPORT
+    #define fstcompact_EXPORT
+    #define fstcompressscript_EXPORT
+    #define fstconst_EXPORT
+    #define fstconst_EXPORT
+    #define fstfar_EXPORT
+    #define fstfarscript_EXPORT
+    #define fstlinearscript_EXPORT
+    #define fstmpdtscript_EXPORT
+    #define fstngram_EXPORT
+    #define fstpdtscript_EXPORT
+    #define fstscript_EXPORT
+    #define fstspecial_EXPORT
+#endif // _WIN32
+#endif
\ No newline at end of file
diff --git a/src/include/fst/exports/fst_Export.h b/src/include/fst/exports/fst_Export.h
new file mode 100644
index 0000000..c1cc62d
--- /dev/null
+++ b/src/include/fst/exports/fst_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fst_EXPORT_H
+#define fst_EXPORT_H
+
+#ifdef fst_BUILT_AS_STATIC
+#  define fst_EXPORT
+#  define FST_NO_EXPORT
+#else
+#  ifndef fst_EXPORT
+#    ifdef fst_EXPORTS
+        /* We are building this library */
+#      define fst_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fst_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FST_NO_EXPORT
+#    define FST_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FST_DEPRECATED
+#  define FST_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FST_DEPRECATED_EXPORT
+#  define FST_DEPRECATED_EXPORT fst_EXPORT FST_DEPRECATED
+#endif
+
+#ifndef FST_DEPRECATED_NO_EXPORT
+#  define FST_DEPRECATED_NO_EXPORT FST_NO_EXPORT FST_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FST_NO_DEPRECATED
+#    define FST_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fst_EXPORT_H */
diff --git a/src/include/fst/exports/fstcompact_Export.h b/src/include/fst/exports/fstcompact_Export.h
new file mode 100644
index 0000000..89e9e68
--- /dev/null
+++ b/src/include/fst/exports/fstcompact_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstcompact_EXPORT_H
+#define fstcompact_EXPORT_H
+
+#ifdef fstcompact_BUILT_AS_STATIC
+#  define fstcompact_EXPORT
+#  define FSTCOMPACT_NO_EXPORT
+#else
+#  ifndef fstcompact_EXPORT
+#    ifdef fstcompact_EXPORTS
+        /* We are building this library */
+#      define fstcompact_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstcompact_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTCOMPACT_NO_EXPORT
+#    define FSTCOMPACT_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTCOMPACT_DEPRECATED
+#  define FSTCOMPACT_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTCOMPACT_DEPRECATED_EXPORT
+#  define FSTCOMPACT_DEPRECATED_EXPORT fstcompact_EXPORT FSTCOMPACT_DEPRECATED
+#endif
+
+#ifndef FSTCOMPACT_DEPRECATED_NO_EXPORT
+#  define FSTCOMPACT_DEPRECATED_NO_EXPORT FSTCOMPACT_NO_EXPORT FSTCOMPACT_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTCOMPACT_NO_DEPRECATED
+#    define FSTCOMPACT_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstcompact_EXPORT_H */
diff --git a/src/include/fst/exports/fstcompressscript_Export.h b/src/include/fst/exports/fstcompressscript_Export.h
new file mode 100644
index 0000000..693e000
--- /dev/null
+++ b/src/include/fst/exports/fstcompressscript_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstcompressscript_EXPORT_H
+#define fstcompressscript_EXPORT_H
+
+#ifdef fstcompressscript_BUILT_AS_STATIC
+#  define fstcompressscript_EXPORT
+#  define FSTCOMPRESSSCRIPT_NO_EXPORT
+#else
+#  ifndef fstcompressscript_EXPORT
+#    ifdef fstcompressscript_EXPORTS
+        /* We are building this library */
+#      define fstcompressscript_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstcompressscript_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTCOMPRESSSCRIPT_NO_EXPORT
+#    define FSTCOMPRESSSCRIPT_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTCOMPRESSSCRIPT_DEPRECATED
+#  define FSTCOMPRESSSCRIPT_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTCOMPRESSSCRIPT_DEPRECATED_EXPORT
+#  define FSTCOMPRESSSCRIPT_DEPRECATED_EXPORT fstcompressscript_EXPORT FSTCOMPRESSSCRIPT_DEPRECATED
+#endif
+
+#ifndef FSTCOMPRESSSCRIPT_DEPRECATED_NO_EXPORT
+#  define FSTCOMPRESSSCRIPT_DEPRECATED_NO_EXPORT FSTCOMPRESSSCRIPT_NO_EXPORT FSTCOMPRESSSCRIPT_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTCOMPRESSSCRIPT_NO_DEPRECATED
+#    define FSTCOMPRESSSCRIPT_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstcompressscript_EXPORT_H */
diff --git a/src/include/fst/exports/fstconst_Export.h b/src/include/fst/exports/fstconst_Export.h
new file mode 100644
index 0000000..6d634c9
--- /dev/null
+++ b/src/include/fst/exports/fstconst_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstconst_EXPORT_H
+#define fstconst_EXPORT_H
+
+#ifdef fstconst_BUILT_AS_STATIC
+#  define fstconst_EXPORT
+#  define FSTCONST_NO_EXPORT
+#else
+#  ifndef fstconst_EXPORT
+#    ifdef fstconst_EXPORTS
+        /* We are building this library */
+#      define fstconst_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstconst_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTCONST_NO_EXPORT
+#    define FSTCONST_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTCONST_DEPRECATED
+#  define FSTCONST_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTCONST_DEPRECATED_EXPORT
+#  define FSTCONST_DEPRECATED_EXPORT fstconst_EXPORT FSTCONST_DEPRECATED
+#endif
+
+#ifndef FSTCONST_DEPRECATED_NO_EXPORT
+#  define FSTCONST_DEPRECATED_NO_EXPORT FSTCONST_NO_EXPORT FSTCONST_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTCONST_NO_DEPRECATED
+#    define FSTCONST_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstconst_EXPORT_H */
diff --git a/src/include/fst/exports/fstfar_Export.h b/src/include/fst/exports/fstfar_Export.h
new file mode 100644
index 0000000..e3bf966
--- /dev/null
+++ b/src/include/fst/exports/fstfar_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstfar_EXPORT_H
+#define fstfar_EXPORT_H
+
+#ifdef fstfar_BUILT_AS_STATIC
+#  define fstfar_EXPORT
+#  define FSTFAR_NO_EXPORT
+#else
+#  ifndef fstfar_EXPORT
+#    ifdef fstfar_EXPORTS
+        /* We are building this library */
+#      define fstfar_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstfar_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTFAR_NO_EXPORT
+#    define FSTFAR_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTFAR_DEPRECATED
+#  define FSTFAR_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTFAR_DEPRECATED_EXPORT
+#  define FSTFAR_DEPRECATED_EXPORT fstfar_EXPORT FSTFAR_DEPRECATED
+#endif
+
+#ifndef FSTFAR_DEPRECATED_NO_EXPORT
+#  define FSTFAR_DEPRECATED_NO_EXPORT FSTFAR_NO_EXPORT FSTFAR_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTFAR_NO_DEPRECATED
+#    define FSTFAR_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstfar_EXPORT_H */
diff --git a/src/include/fst/exports/fstfarscript_Export.h b/src/include/fst/exports/fstfarscript_Export.h
new file mode 100644
index 0000000..4c6d29a
--- /dev/null
+++ b/src/include/fst/exports/fstfarscript_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstfarscript_EXPORT_H
+#define fstfarscript_EXPORT_H
+
+#ifdef fstfar_BUILT_AS_STATIC
+#  define fstfarscript_EXPORT
+#  define FSTFARSCRIPT_NO_EXPORT
+#else
+#  ifndef fstfarscript_EXPORT
+#    ifdef fstfarscript_EXPORTS
+        /* We are building this library */
+#      define fstfarscript_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstfarscript_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTFARSCRIPT_NO_EXPORT
+#    define FSTFARSCRIPT_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTFARSCRIPT_DEPRECATED
+#  define FSTFARSCRIPT_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTFARSCRIPT_DEPRECATED_EXPORT
+#  define FSTFARSCRIPT_DEPRECATED_EXPORT fstfarscript_EXPORT FSTFARSCRIPT_DEPRECATED
+#endif
+
+#ifndef FSTFARSCRIPT_DEPRECATED_NO_EXPORT
+#  define FSTFARSCRIPT_DEPRECATED_NO_EXPORT FSTFARSCRIPT_NO_EXPORT FSTFARSCRIPT_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTFARSCRIPT_NO_DEPRECATED
+#    define FSTFARSCRIPT_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstfarscript_EXPORT_H */
diff --git a/src/include/fst/exports/fstlinearscript_Export.h b/src/include/fst/exports/fstlinearscript_Export.h
new file mode 100644
index 0000000..a809cc7
--- /dev/null
+++ b/src/include/fst/exports/fstlinearscript_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstlinearscript_EXPORT_H
+#define fstlinearscript_EXPORT_H
+
+#ifdef fstlinearscript_BUILT_AS_STATIC
+#  define fstlinearscript_EXPORT
+#  define FSTLINEARSCRIPT_NO_EXPORT
+#else
+#  ifndef fstlinearscript_EXPORT
+#    ifdef fstlinearscript_EXPORTS
+        /* We are building this library */
+#      define fstlinearscript_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstlinearscript_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTLINEARSCRIPT_NO_EXPORT
+#    define FSTLINEARSCRIPT_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTLINEARSCRIPT_DEPRECATED
+#  define FSTLINEARSCRIPT_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTLINEARSCRIPT_DEPRECATED_EXPORT
+#  define FSTLINEARSCRIPT_DEPRECATED_EXPORT fstlinearscript_EXPORT FSTLINEARSCRIPT_DEPRECATED
+#endif
+
+#ifndef FSTLINEARSCRIPT_DEPRECATED_NO_EXPORT
+#  define FSTLINEARSCRIPT_DEPRECATED_NO_EXPORT FSTLINEARSCRIPT_NO_EXPORT FSTLINEARSCRIPT_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTLINEARSCRIPT_NO_DEPRECATED
+#    define FSTLINEARSCRIPT_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstlinearscript_EXPORT_H */
diff --git a/src/include/fst/exports/fstmpdtscript_Export.h b/src/include/fst/exports/fstmpdtscript_Export.h
new file mode 100644
index 0000000..68aac12
--- /dev/null
+++ b/src/include/fst/exports/fstmpdtscript_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstmpdtscript_EXPORT_H
+#define fstmpdtscript_EXPORT_H
+
+#ifdef fstmpdtscript_BUILT_AS_STATIC
+#  define fstmpdtscript_EXPORT
+#  define FSTMPDTSCRIPT_NO_EXPORT
+#else
+#  ifndef fstmpdtscript_EXPORT
+#    ifdef fstmpdtscript_EXPORTS
+        /* We are building this library */
+#      define fstmpdtscript_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstmpdtscript_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTMPDTSCRIPT_NO_EXPORT
+#    define FSTMPDTSCRIPT_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTMPDTSCRIPT_DEPRECATED
+#  define FSTMPDTSCRIPT_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTMPDTSCRIPT_DEPRECATED_EXPORT
+#  define FSTMPDTSCRIPT_DEPRECATED_EXPORT fstmpdtscript_EXPORT FSTMPDTSCRIPT_DEPRECATED
+#endif
+
+#ifndef FSTMPDTSCRIPT_DEPRECATED_NO_EXPORT
+#  define FSTMPDTSCRIPT_DEPRECATED_NO_EXPORT FSTMPDTSCRIPT_NO_EXPORT FSTMPDTSCRIPT_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTMPDTSCRIPT_NO_DEPRECATED
+#    define FSTMPDTSCRIPT_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstmpdtscript_EXPORT_H */
diff --git a/src/include/fst/exports/fstngram_Export.h b/src/include/fst/exports/fstngram_Export.h
new file mode 100644
index 0000000..15bc06a
--- /dev/null
+++ b/src/include/fst/exports/fstngram_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstngram_EXPORT_H
+#define fstngram_EXPORT_H
+
+#ifdef fstngram_BUILT_AS_STATIC
+#  define fstngram_EXPORT
+#  define FSTNGRAM_NO_EXPORT
+#else
+#  ifndef fstngram_EXPORT
+#    ifdef fstngram_EXPORTS
+        /* We are building this library */
+#      define fstngram_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstngram_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTNGRAM_NO_EXPORT
+#    define FSTNGRAM_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTNGRAM_DEPRECATED
+#  define FSTNGRAM_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTNGRAM_DEPRECATED_EXPORT
+#  define FSTNGRAM_DEPRECATED_EXPORT fstngram_EXPORT FSTNGRAM_DEPRECATED
+#endif
+
+#ifndef FSTNGRAM_DEPRECATED_NO_EXPORT
+#  define FSTNGRAM_DEPRECATED_NO_EXPORT FSTNGRAM_NO_EXPORT FSTNGRAM_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTNGRAM_NO_DEPRECATED
+#    define FSTNGRAM_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstngram_EXPORT_H */
diff --git a/src/include/fst/exports/fstpdtscript_Export.h b/src/include/fst/exports/fstpdtscript_Export.h
new file mode 100644
index 0000000..c4995b3
--- /dev/null
+++ b/src/include/fst/exports/fstpdtscript_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstpdtscript_EXPORT_H
+#define fstpdtscript_EXPORT_H
+
+#ifdef fstpdtscript_BUILT_AS_STATIC
+#  define fstpdtscript_EXPORT
+#  define FSTPDTSCRIPT_NO_EXPORT
+#else
+#  ifndef fstpdtscript_EXPORT
+#    ifdef fstpdtscript_EXPORTS
+        /* We are building this library */
+#      define fstpdtscript_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstpdtscript_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTPDTSCRIPT_NO_EXPORT
+#    define FSTPDTSCRIPT_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTPDTSCRIPT_DEPRECATED
+#  define FSTPDTSCRIPT_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTPDTSCRIPT_DEPRECATED_EXPORT
+#  define FSTPDTSCRIPT_DEPRECATED_EXPORT fstpdtscript_EXPORT FSTPDTSCRIPT_DEPRECATED
+#endif
+
+#ifndef FSTPDTSCRIPT_DEPRECATED_NO_EXPORT
+#  define FSTPDTSCRIPT_DEPRECATED_NO_EXPORT FSTPDTSCRIPT_NO_EXPORT FSTPDTSCRIPT_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTPDTSCRIPT_NO_DEPRECATED
+#    define FSTPDTSCRIPT_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstpdtscript_EXPORT_H */
diff --git a/src/include/fst/exports/fstscript_Export.h b/src/include/fst/exports/fstscript_Export.h
new file mode 100644
index 0000000..4f4407e
--- /dev/null
+++ b/src/include/fst/exports/fstscript_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstscript_EXPORT_H
+#define fstscript_EXPORT_H
+
+#ifdef fstscript_BUILT_AS_STATIC
+#  define fstscript_EXPORT
+#  define FSTSCRIPT_NO_EXPORT
+#else
+#  ifndef fstscript_EXPORT
+#    ifdef fstscript_EXPORTS
+        /* We are building this library */
+#      define fstscript_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstscript_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTSCRIPT_NO_EXPORT
+#    define FSTSCRIPT_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTSCRIPT_DEPRECATED
+#  define FSTSCRIPT_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTSCRIPT_DEPRECATED_EXPORT
+#  define FSTSCRIPT_DEPRECATED_EXPORT fstscript_EXPORT FSTSCRIPT_DEPRECATED
+#endif
+
+#ifndef FSTSCRIPT_DEPRECATED_NO_EXPORT
+#  define FSTSCRIPT_DEPRECATED_NO_EXPORT FSTSCRIPT_NO_EXPORT FSTSCRIPT_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTSCRIPT_NO_DEPRECATED
+#    define FSTSCRIPT_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstscript_EXPORT_H */
diff --git a/src/include/fst/exports/fstspecial_Export.h b/src/include/fst/exports/fstspecial_Export.h
new file mode 100644
index 0000000..56010fb
--- /dev/null
+++ b/src/include/fst/exports/fstspecial_Export.h
@@ -0,0 +1,42 @@
+
+#ifndef fstspecial_EXPORT_H
+#define fstspecial_EXPORT_H
+
+#ifdef fstspecial_BUILT_AS_STATIC
+#  define fstspecial_EXPORT
+#  define FSTSPECIAL_NO_EXPORT
+#else
+#  ifndef fstspecial_EXPORT
+#    ifdef fstspecial_EXPORTS
+        /* We are building this library */
+#      define fstspecial_EXPORT __declspec(dllexport)
+#    else
+        /* We are using this library */
+#      define fstspecial_EXPORT __declspec(dllimport)
+#    endif
+#  endif
+
+#  ifndef FSTSPECIAL_NO_EXPORT
+#    define FSTSPECIAL_NO_EXPORT 
+#  endif
+#endif
+
+#ifndef FSTSPECIAL_DEPRECATED
+#  define FSTSPECIAL_DEPRECATED __declspec(deprecated)
+#endif
+
+#ifndef FSTSPECIAL_DEPRECATED_EXPORT
+#  define FSTSPECIAL_DEPRECATED_EXPORT fstspecial_EXPORT FSTSPECIAL_DEPRECATED
+#endif
+
+#ifndef FSTSPECIAL_DEPRECATED_NO_EXPORT
+#  define FSTSPECIAL_DEPRECATED_NO_EXPORT FSTSPECIAL_NO_EXPORT FSTSPECIAL_DEPRECATED
+#endif
+
+#if 0 /* DEFINE_NO_DEPRECATED */
+#  ifndef FSTSPECIAL_NO_DEPRECATED
+#    define FSTSPECIAL_NO_DEPRECATED
+#  endif
+#endif
+
+#endif /* fstspecial_EXPORT_H */
diff --git a/src/include/fst/extensions/compress/compress.h b/src/include/fst/extensions/compress/compress.h
index 076df3e..7cb63ec 100644
--- a/src/include/fst/extensions/compress/compress.h
+++ b/src/include/fst/extensions/compress/compress.h
@@ -43,6 +43,11 @@
 #include <fst/queue.h>
 #include <fst/statesort.h>
 #include <fst/visit.h>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 namespace fst {
 
@@ -777,6 +782,11 @@ bool Decompress(const std::string &source, MutableFst<Arc> *fst) {
       return false;
     }
   }
+  #ifdef _WIN32
+  if (!fstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
+  #endif
   std::istream &istrm = fstrm.is_open() ? fstrm : std::cin;
   Decompress(istrm, source.empty() ? "standard input" : source, fst);
   return !!istrm;
diff --git a/src/include/fst/extensions/compress/compressscript.h b/src/include/fst/extensions/compress/compressscript.h
index 651a131..97e9e55 100644
--- a/src/include/fst/extensions/compress/compressscript.h
+++ b/src/include/fst/extensions/compress/compressscript.h
@@ -24,6 +24,8 @@
 #include <fst/extensions/compress/compress.h>
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -39,7 +41,7 @@ void Compress(CompressArgs *args) {
   args->retval = Compress(fst, source);
 }
 
-bool Compress(const FstClass &fst, const std::string &source);
+bool fstcompressscript_EXPORT Compress(const FstClass &fst, const std::string &source);
 
 using DecompressInnerArgs = std::tuple<const std::string &, MutableFstClass *>;
 
@@ -52,7 +54,7 @@ void Decompress(DecompressArgs *args) {
   args->retval = Decompress(source, fst);
 }
 
-bool Decompress(const std::string &source, MutableFstClass *fst);
+bool fstcompressscript_EXPORT Decompress(const std::string &source, MutableFstClass *fst);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/extensions/far/compile-strings.h b/src/include/fst/extensions/far/compile-strings.h
index f5d1e06..b294696 100644
--- a/src/include/fst/extensions/far/compile-strings.h
+++ b/src/include/fst/extensions/far/compile-strings.h
@@ -17,18 +17,23 @@
 
 #ifndef FST_EXTENSIONS_FAR_COMPILE_STRINGS_H_
 #define FST_EXTENSIONS_FAR_COMPILE_STRINGS_H_
-
-#include <libgen.h>
-
 #include <cstdint>
 #include <fstream>
 #include <istream>
 #include <string>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/extensions/far/far.h>
 #include <fstream>
 #include <fst/string.h>
+#include <fst/exports/exports.h>
+
+DECLARE_export_string(far_field_separator, fstfarscript_EXPORT);
 
 namespace fst {
 namespace internal {
@@ -134,7 +139,7 @@ class StringReader {
 
 // Computes the minimal length required to encode each line number as a decimal
 // number, or zero if the file is not seekable.
-int KeySize(const std::string &source);
+int fstfarscript_EXPORT KeySize(const std::string &source);
 
 }  // namespace internal
 
@@ -194,12 +199,17 @@ void CompileStrings(const std::vector<std::string> &sources,
     }
     std::ifstream fstrm;
     if (!in_source.empty()) {
-      fstrm.open(in_source);
+      fstrm.open(in_source, std::ios_base::in | std::ios_base::binary);
       if (!fstrm) {
         FSTERROR() << "CompileStrings: Can't open file: " << in_source;
         return;
       }
     }
+    #ifdef _WIN32
+    if (!fstrm.is_open()) {
+        _setmode(_fileno(stdin), _O_BINARY);
+    }
+    #endif
     std::istream &istrm = fstrm.is_open() ? fstrm : std::cin;
     bool keep_syms = keep_symbols;
     for (internal::StringReader<Arc> reader(
diff --git a/src/include/fst/extensions/far/create.h b/src/include/fst/extensions/far/create.h
index 4874d4e..fe5a728 100644
--- a/src/include/fst/extensions/far/create.h
+++ b/src/include/fst/extensions/far/create.h
@@ -20,7 +20,9 @@
 #ifndef FST_EXTENSIONS_FAR_CREATE_H_
 #define FST_EXTENSIONS_FAR_CREATE_H_
 
+#ifndef _WIN32
 #include <libgen.h>
+#endif
 
 #include <cstdint>
 #include <sstream>
diff --git a/src/include/fst/extensions/far/far-class.h b/src/include/fst/extensions/far/far-class.h
index 3ed9dfe..7806a9f 100644
--- a/src/include/fst/extensions/far/far-class.h
+++ b/src/include/fst/extensions/far/far-class.h
@@ -27,6 +27,7 @@
 #include <fst/extensions/far/far.h>
 #include <fst/script/arg-packs.h>
 #include <fst/script/fstscript.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -35,6 +36,7 @@ namespace script {
 
 // Virtual interface implemented by each concrete FarReaderImpl<A>.
 // See the FarReader interface in far.h for the exact semantics.
+    class fstfarscript_EXPORT FarReaderImplBase;
 class FarReaderImplBase {
  public:
   virtual const std::string &ArcType() const = 0;
@@ -89,7 +91,7 @@ class FarReaderClassImpl : public FarReaderImplBase {
   mutable std::unique_ptr<FstClass> fstc_;
 };
 
-class FarReaderClass;
+class fstfarscript_EXPORT FarReaderClass;
 
 using OpenFarReaderClassArgs =
     WithReturnValue<std::unique_ptr<FarReaderClass>,
@@ -212,7 +214,7 @@ class FarWriterClassImpl : public FarWriterImplBase {
   std::unique_ptr<FarWriter<Arc>> writer_;
 };
 
-class FarWriterClass;
+class fstfarscript_EXPORT FarWriterClass;
 
 using CreateFarWriterClassInnerArgs = std::pair<const std::string &, FarType>;
 
diff --git a/src/include/fst/extensions/far/far.h b/src/include/fst/extensions/far/far.h
index c1d3ae3..a55463e 100644
--- a/src/include/fst/extensions/far/far.h
+++ b/src/include/fst/extensions/far/far.h
@@ -22,6 +22,10 @@
 
 #include <algorithm>
 #include <cstdint>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
 #include <iostream>
 #include <sstream>
 #include <string>
@@ -35,12 +39,23 @@
 #include <fst/fst.h>
 #include <fst/vector-fst.h>
 #include <string_view>
+#include <fst/exports/exports.h>
+
+#ifdef _WIN32
+
+inline std::string fstfarscript_EXPORT basename(std::string const & path)
+{
+  return path.substr(path.find_last_of("/\\") + 1);
+}
+#else
+#include <libgen.h>
+#endif
 
 namespace fst {
 
-enum class FarEntryType { LINE, FILE };
+enum class fstfarscript_EXPORT FarEntryType { LINE, FILE };
 
-enum class FarType {
+enum class fstfarscript_EXPORT FarType {
   DEFAULT = 0,
   STTABLE = 1,
   STLIST = 2,
@@ -50,7 +65,7 @@ enum class FarType {
 // Checks for FST magic number in an input stream (to be opened given the source
 // name), to indicate to the caller function that the stream content is an FST
 // header.
-inline bool IsFst(const std::string &source) {
+inline bool fstfarscript_EXPORT IsFst(const std::string &source) {
   std::ifstream strm(source, std::ios_base::in | std::ios_base::binary);
   if (!strm) return false;
   int32_t magic_number = 0;
@@ -60,6 +75,7 @@ inline bool IsFst(const std::string &source) {
 }
 
 // FST archive header class
+class fstfarscript_EXPORT FarHeader;
 class FarHeader {
  public:
   const std::string &ArcType() const { return arctype_; }
@@ -263,6 +279,11 @@ class FstFarWriter final : public FarWriter<A> {
 template <class Arc>
 FarWriter<Arc> *FarWriter<Arc>::Create(const std::string &source,
                                        FarType type) {
+  #ifdef _WIN32
+  if(source.empty()){
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   switch (type) {
     case FarType::DEFAULT:
       if (source.empty()) return STListFarWriter<Arc>::Create(source);
@@ -395,6 +416,9 @@ class FstFarReader final : public FarReader<A> {
     for (size_t i = 0; i < keys_.size(); ++i) {
       if (keys_[i].empty()) {
         if (!has_stdin_) {
+  #ifdef _WIN32
+            _setmode(_fileno(stdin), _O_BINARY);
+  #endif
           streams_[i] = &std::cin;
           has_stdin_ = true;
         } else {
@@ -458,6 +482,9 @@ class FstFarReader final : public FarReader<A> {
 
   ~FstFarReader() final {
     for (size_t i = 0; i < keys_.size(); ++i) {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       if (streams_[i] != &std::cin) {
         delete streams_[i];
       }
diff --git a/src/include/fst/extensions/far/farscript.h b/src/include/fst/extensions/far/farscript.h
index 792cbdc..7923164 100644
--- a/src/include/fst/extensions/far/farscript.h
+++ b/src/include/fst/extensions/far/farscript.h
@@ -25,6 +25,7 @@
 #include <string>
 #include <vector>
 
+#include <fst/exports/exports.h>
 #include <fst/extensions/far/compile-strings.h>
 #include <fst/extensions/far/convert.h>
 #include <fst/extensions/far/create.h>
@@ -46,7 +47,7 @@ namespace script {
 // Note: it is safe to pass these strings as references because this struct is
 // only used to pass them deeper in the call graph. Be sure you understand why
 // this is so before using this struct for anything else!
-struct FarCompileStringsArgs {
+struct fstfarscript_EXPORT FarCompileStringsArgs {
   const std::vector<std::string> &sources;
   FarWriterClass &writer;
   std::string_view fst_type;
@@ -72,7 +73,7 @@ void CompileStrings(FarCompileStringsArgs *args) {
       args->key_suffix);
 }
 
-void CompileStrings(const std::vector<std::string> &sources,
+void fstfarscript_EXPORT CompileStrings(const std::vector<std::string> &sources,
                     FarWriterClass &writer, std::string_view fst_type,
                     int32_t generate_keys, FarEntryType fet, TokenType tt,
                     const std::string &symbols_source,
@@ -91,13 +92,13 @@ void Convert(FarConvertArgs *args) {
   ::fst::Convert<Arc>(reader, writer, std::get<2>(*args));
 }
 
-void Convert(FarReaderClass &reader, FarWriterClass &writer,
+void fstfarscript_EXPORT Convert(FarReaderClass &reader, FarWriterClass &writer,
              std::string_view fst_type);
 
 // Note: it is safe to pass these strings as references because this struct is
 // only used to pass them deeper in the call graph. Be sure you understand why
 // this is so before using this struct for anything else!
-struct FarCreateArgs {
+struct fstfarscript_EXPORT FarCreateArgs {
   const std::vector<std::string> &sources;
   FarWriterClass &writer;
   const int32_t generate_keys;
@@ -112,7 +113,7 @@ void Create(FarCreateArgs *args) {
                          args->key_prefix, args->key_suffix);
 }
 
-void Create(const std::vector<std::string> &sources, FarWriterClass &writer,
+void fstfarscript_EXPORT Create(const std::vector<std::string> &sources, FarWriterClass &writer,
             int32_t generate_keys, const std::string &key_prefix,
             const std::string &key_suffix);
 
@@ -127,7 +128,7 @@ void Decode(FarDecodeArgs *args) {
   Decode(reader, writer, mapper);
 }
 
-void Decode(FarReaderClass &reader, FarWriterClass &writer,
+void fstfarscript_EXPORT Decode(FarReaderClass &reader, FarWriterClass &writer,
             const EncodeMapperClass &encoder);
 
 using FarEncodeArgs =
@@ -141,7 +142,7 @@ void Encode(FarEncodeArgs *args) {
   Encode(reader, writer, mapper);
 }
 
-void Encode(FarReaderClass &reader, FarWriterClass &writer,
+void fstfarscript_EXPORT Encode(FarReaderClass &reader, FarWriterClass &writer,
             EncodeMapperClass *encoder);
 
 using FarEqualInnerArgs = std::tuple<FarReaderClass &, FarReaderClass &, float,
@@ -158,7 +159,7 @@ void Equal(FarEqualArgs *args) {
                             std::get<3>(args->args), std::get<4>(args->args));
 }
 
-bool Equal(FarReaderClass &reader1, FarReaderClass &reader2,
+bool fstfarscript_EXPORT Equal(FarReaderClass &reader1, FarReaderClass &reader2,
            float delta = kDelta, std::string_view begin_key = "",
            std::string_view end_key = "");
 
@@ -175,7 +176,7 @@ void Extract(FarExtractArgs *args) {
                           std::get<5>(*args), std::get<6>(*args));
 }
 
-void Extract(FarReaderClass &reader, int32_t generate_sources,
+void fstfarscript_EXPORT Extract(FarReaderClass &reader, int32_t generate_sources,
              const std::string &keys, const std::string &key_separator,
              const std::string &range_delimiter,
              const std::string &source_prefix,
@@ -191,7 +192,7 @@ void Info(FarInfoArgs *args) {
                        std::get<2>(*args), std::get<3>(*args));
 }
 
-void Info(const std::vector<std::string> &sources, const std::string &arc_type,
+void fstfarscript_EXPORT Info(const std::vector<std::string> &sources, const std::string &arc_type,
           const std::string &begin_key, const std::string &end_key,
           const bool list_fsts);
 
@@ -206,7 +207,7 @@ void GetInfo(FarGetInfoArgs *args) {
                           std::get<4>(*args));
 }
 
-void GetInfo(const std::vector<std::string> &sources,
+void fstfarscript_EXPORT GetInfo(const std::vector<std::string> &sources,
              const std::string &arc_type, const std::string &begin_key,
              const std::string &end_key, const bool list_fsts, FarInfoData *);
 
@@ -225,11 +226,11 @@ void Isomorphic(FarIsomorphicArgs *args) {
       std::get<4>(args->args));
 }
 
-bool Isomorphic(FarReaderClass &reader1, FarReaderClass &reader2,
+bool fstfarscript_EXPORT Isomorphic(FarReaderClass &reader1, FarReaderClass &reader2,
                 float delta = kDelta, std::string_view begin_key = "",
                 std::string_view end_key = "");
 
-struct FarPrintStringsArgs {
+struct fstfarscript_EXPORT FarPrintStringsArgs {
   FarReaderClass &reader;
   const FarEntryType entry_type;
   const TokenType token_type;
@@ -254,7 +255,7 @@ void PrintStrings(FarPrintStringsArgs *args) {
                                args->source_prefix, args->source_suffix);
 }
 
-void PrintStrings(FarReaderClass &reader, const FarEntryType entry_type,
+void fstfarscript_EXPORT PrintStrings(FarReaderClass &reader, const FarEntryType entry_type,
                   const TokenType token_type, const std::string &begin_key,
                   const std::string &end_key, const bool print_key,
                   const bool print_weight, const std::string &symbols_source,
@@ -262,6 +263,7 @@ void PrintStrings(FarReaderClass &reader, const FarEntryType entry_type,
                   const std::string &source_prefix,
                   const std::string &source_suffix);
 
+
 }  // namespace script
 }  // namespace fst
 
diff --git a/src/include/fst/extensions/far/getters.h b/src/include/fst/extensions/far/getters.h
index 772ce2e..584bb28 100644
--- a/src/include/fst/extensions/far/getters.h
+++ b/src/include/fst/extensions/far/getters.h
@@ -27,19 +27,20 @@
 #include <fst/extensions/far/far.h>
 #include <fst/string.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
 
-bool GetFarType(std::string_view str, FarType *far_type);
+bool fstfarscript_EXPORT GetFarType(std::string_view str, FarType *far_type);
 
-bool GetFarEntryType(std::string_view str, FarEntryType *entry_type);
+bool fstfarscript_EXPORT GetFarEntryType(std::string_view str, FarEntryType *entry_type);
 
-void ExpandArgs(int argc, char **argv, int *argcp, char ***argvp);
+void fstfarscript_EXPORT ExpandArgs(int argc, char **argv, int *argcp, char ***argvp);
 
 }  // namespace script
 
-std::string GetFarTypeString(FarType far_type);
+std::string fstfarscript_EXPORT GetFarTypeString(FarType far_type);
 
 }  // namespace fst
 
diff --git a/src/include/fst/extensions/far/print-strings.h b/src/include/fst/extensions/far/print-strings.h
index f4e0b2c..d0209e8 100644
--- a/src/include/fst/extensions/far/print-strings.h
+++ b/src/include/fst/extensions/far/print-strings.h
@@ -26,13 +26,12 @@
 #include <vector>
 
 #include <fst/flags.h>
+#include <fst/extensions/far/compile-strings.h>
 #include <fst/extensions/far/far.h>
 #include <fstream>
 #include <fst/shortest-distance.h>
 #include <fst/string.h>
 
-DECLARE_string(far_field_separator);
-
 namespace fst {
 
 template <class Arc>
@@ -95,7 +94,7 @@ void PrintStrings(FarReader<Arc> &reader, FarEntryType entry_type,
       }
       std::string source;
       source = source_prefix + sstrm.str() + source_suffix;
-      std::ofstream ostrm(source);
+      std::ofstream ostrm(source, std::ios_base::out | std::ios_base::binary);
       if (!ostrm) {
         LOG(ERROR) << "PrintStrings: Can't open file: " << source;
         return;
diff --git a/src/include/fst/extensions/far/script-impl.h b/src/include/fst/extensions/far/script-impl.h
index 7697604..10bcd03 100644
--- a/src/include/fst/extensions/far/script-impl.h
+++ b/src/include/fst/extensions/far/script-impl.h
@@ -24,12 +24,15 @@
 #include <string>
 
 #include <fst/compat.h>
+#include <fst/exports/exports.h>
+#include <fst/util.h>
+
 namespace fst {
 namespace script {
 
-std::string LoadArcTypeFromFar(const std::string &far_source);
+std::string fstfarscript_EXPORT LoadArcTypeFromFar(const std::string &far_source);
 
-std::string LoadArcTypeFromFst(const std::string &fst_source);
+std::string fstfarscript_EXPORT LoadArcTypeFromFst(const std::string &fst_source);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/extensions/far/stlist.h b/src/include/fst/extensions/far/stlist.h
index 218bd0d..558beed 100644
--- a/src/include/fst/extensions/far/stlist.h
+++ b/src/include/fst/extensions/far/stlist.h
@@ -32,10 +32,16 @@
 #include <string>
 #include <utility>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fstream>
 #include <fst/util.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
@@ -118,6 +124,9 @@ class STListReader {
     for (size_t i = 0; i < sources.size(); ++i) {
       if (sources[i].empty()) {
         if (!has_stdin) {
+          #ifdef _WIN32
+            _setmode(_fileno(stdin), _O_BINARY);
+          #endif
           streams_[i] = &std::cin;
           sources_[i] = "stdin";
           has_stdin = true;
@@ -294,7 +303,7 @@ bool ReadSTListHeader(const std::string &source, Header *header) {
   return true;
 }
 
-bool IsSTList(const std::string &source);
+bool fstfar_EXPORT IsSTList(const std::string &source);
 
 }  // namespace fst
 
diff --git a/src/include/fst/extensions/far/sttable.h b/src/include/fst/extensions/far/sttable.h
index ff7bdff..d18e9c1 100644
--- a/src/include/fst/extensions/far/sttable.h
+++ b/src/include/fst/extensions/far/sttable.h
@@ -33,6 +33,7 @@
 #include <fstream>
 #include <fst/util.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
@@ -373,7 +374,7 @@ bool ReadSTTableHeader(const std::string &source, Header *header) {
   return true;
 }
 
-bool IsSTTable(const std::string &source);
+bool fstfar_EXPORT IsSTTable(const std::string &source);
 
 }  // namespace fst
 
diff --git a/src/include/fst/extensions/linear/linear-fst.h b/src/include/fst/extensions/linear/linear-fst.h
index 3f378fa..cd734d9 100644
--- a/src/include/fst/extensions/linear/linear-fst.h
+++ b/src/include/fst/extensions/linear/linear-fst.h
@@ -26,6 +26,11 @@
 #include <memory>
 #include <string>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/compat.h>
 #include <fst/log.h>
@@ -513,6 +518,9 @@ class LinearTaggerFst : public ImplToFst<internal::LinearTaggerFstImpl<A>> {
       }
       return Read(strm, FstReadOptions(source));
     } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       return Read(std::cin, FstReadOptions("standard input"));
     }
   }
@@ -533,6 +541,9 @@ class LinearTaggerFst : public ImplToFst<internal::LinearTaggerFstImpl<A>> {
       }
       return Write(strm, FstWriteOptions(source));
     } else {
+      #ifdef _WIN32
+        _setmode(_fileno(stdout), _O_BINARY);
+      #endif
       return Write(std::cout, FstWriteOptions("standard output"));
     }
   }
@@ -964,6 +975,9 @@ class LinearClassifierFst
       }
       return Read(strm, FstReadOptions(source));
     } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       return Read(std::cin, FstReadOptions("standard input"));
     }
   }
@@ -985,6 +999,9 @@ class LinearClassifierFst
       }
       return Write(strm, FstWriteOptions(source));
     } else {
+      #ifdef _WIN32
+        _setmode(_fileno(stdout), _O_BINARY);
+      #endif
       return Write(std::cout, FstWriteOptions("standard output"));
     }
   }
diff --git a/src/include/fst/extensions/linear/linearscript.h b/src/include/fst/extensions/linear/linearscript.h
index c57e149..1b42a05 100644
--- a/src/include/fst/extensions/linear/linearscript.h
+++ b/src/include/fst/extensions/linear/linearscript.h
@@ -24,18 +24,20 @@
 #include <vector>
 
 #include <fst/compat.h>
+#include <fst/flags.h>
 #include <fst/extensions/linear/linear-fst-data-builder.h>
 #include <fst/extensions/linear/linear-fst.h>
 #include <fstream>
 #include <fst/symbol-table.h>
 #include <fst/script/arg-packs.h>
 #include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
 
-DECLARE_string(delimiter);
-DECLARE_string(empty_symbol);
-DECLARE_string(start_symbol);
-DECLARE_string(end_symbol);
-DECLARE_bool(classifier);
+DECLARE_export_string(delimiter, fstlinearscript_EXPORT);
+DECLARE_export_string(empty_symbol, fstlinearscript_EXPORT);
+DECLARE_export_string(start_symbol, fstlinearscript_EXPORT);
+DECLARE_export_string(end_symbol, fstlinearscript_EXPORT);
+DECLARE_export_bool(classifier, fstlinearscript_EXPORT);
 
 namespace fst {
 namespace script {
@@ -45,9 +47,9 @@ using LinearCompileArgs =
                char **, int, const std::string &, const std::string &,
                const std::string &, const std::string &>;
 
-bool ValidateDelimiter();
+bool fstlinearscript_EXPORT ValidateDelimiter();
 
-bool ValidateEmptySymbol();
+bool fstlinearscript_EXPORT ValidateEmptySymbol();
 
 // Returns the proper label given the symbol. For symbols other than
 // `FST_FLAGS_start_symbol` or `FST_FLAGS_end_symbol`, looks up the symbol
@@ -124,7 +126,7 @@ bool GetModelRecord(const std::string &model, std::istream &strm,
 template <class Arc>
 void AddVocab(const std::string &vocab, SymbolTable *isyms, SymbolTable *fsyms,
               SymbolTable *osyms, LinearFstDataBuilder<Arc> *builder) {
-  std::ifstream in(vocab);
+  std::ifstream in(vocab, std::ios_base::in | std::ios_base::binary);
   if (!in) LOG(FATAL) << "Can't open file: " << vocab;
   size_t num_line = 0, num_added = 0;
   std::vector<std::string> fields;
@@ -150,7 +152,7 @@ template <class Arc>
 void AddVocab(const std::string &vocab, SymbolTable *isyms, SymbolTable *fsyms,
               SymbolTable *osyms,
               LinearClassifierFstDataBuilder<Arc> *builder) {
-  std::ifstream in(vocab);
+  std::ifstream in(vocab, std::ios_base::in | std::ios_base::binary);
   if (!in) LOG(FATAL) << "Can't open file: " << vocab;
   size_t num_line = 0, num_added = 0;
   std::vector<std::string> fields;
@@ -186,7 +188,7 @@ void AddVocab(const std::string &vocab, SymbolTable *isyms, SymbolTable *fsyms,
 template <class Arc>
 void AddModel(const std::string &model, SymbolTable *fsyms, SymbolTable *osyms,
               LinearFstDataBuilder<Arc> *builder) {
-  std::ifstream in(model);
+  std::ifstream in(model, std::ios_base::in | std::ios_base::binary);
   if (!in) LOG(FATAL) << "Can't open file: " << model;
   std::string line;
   std::getline(in, line);
@@ -240,7 +242,7 @@ void AddModel(const std::string &model, SymbolTable *fsyms, SymbolTable *osyms,
 template <class Arc>
 void AddModel(const std::string &model, SymbolTable *fsyms, SymbolTable *osyms,
               LinearClassifierFstDataBuilder<Arc> *builder) {
-  std::ifstream in(model);
+  std::ifstream in(model, std::ios_base::in | std::ios_base::binary);
   if (!in) LOG(FATAL) << "Can't open file: " << model;
   std::string line;
   std::getline(in, line);
@@ -289,8 +291,8 @@ void AddModel(const std::string &model, SymbolTable *fsyms, SymbolTable *osyms,
           << num_line << " lines.";
 }
 
-void SplitByWhitespace(const std::string &str, std::vector<std::string> *out);
-int ScanNumClasses(char **models, int models_length);
+void fstlinearscript_EXPORT SplitByWhitespace(const std::string &str, std::vector<std::string> *out);
+int fstlinearscript_EXPORT ScanNumClasses(char **models, int models_length);
 
 template <class Arc>
 void LinearCompileTpl(LinearCompileArgs *args) {
@@ -342,7 +344,7 @@ void LinearCompileTpl(LinearCompileArgs *args) {
   if (!save_osymbols.empty()) osyms.WriteText(save_osymbols);
 }
 
-void LinearCompile(const std::string &arc_type,
+void fstlinearscript_EXPORT LinearCompile(const std::string &arc_type,
                    const std::string &epsilon_symbol,
                    const std::string &unknown_symbol, const std::string &vocab,
                    char **models, int models_len, const std::string &out,
@@ -412,6 +414,7 @@ bool GetModelRecord(const std::string &model, std::istream &strm,
   return true;
 }
 
+
 }  // namespace script
 }  // namespace fst
 
diff --git a/src/include/fst/extensions/mpdt/mpdt.h b/src/include/fst/extensions/mpdt/mpdt.h
index 89933d7..88aedd4 100644
--- a/src/include/fst/extensions/mpdt/mpdt.h
+++ b/src/include/fst/extensions/mpdt/mpdt.h
@@ -31,10 +31,11 @@
 #include <fst/extensions/pdt/pdt.h>
 #include <unordered_map>
 #include <optional>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
-enum class MPdtType : uint8_t {
+enum class fstmpdtscript_EXPORT MPdtType : uint8_t {
   READ_RESTRICT,   // Can only read from first empty stack
   WRITE_RESTRICT,  // Can only write to first empty stack
   NO_RESTRICT,     // No read-write restrictions
diff --git a/src/include/fst/extensions/mpdt/mpdtscript.h b/src/include/fst/extensions/mpdt/mpdtscript.h
index e48dc33..8c8bd86 100644
--- a/src/include/fst/extensions/mpdt/mpdtscript.h
+++ b/src/include/fst/extensions/mpdt/mpdtscript.h
@@ -39,6 +39,8 @@
 #include <fst/script/shortest-path.h>
 // FstClassPair, and to detect
 // any collisions.
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -71,7 +73,7 @@ void Compose(MPdtComposeArgs *args) {
   }
 }
 
-void Compose(const FstClass &ifst1, const FstClass &ifst2,
+void fstmpdtscript_EXPORT Compose(const FstClass &ifst1, const FstClass &ifst2,
              const std::vector<std::pair<int64_t, int64_t>> &parens,
              const std::vector<int64_t> &assignments, MutableFstClass *ofst,
              const MPdtComposeOptions &copts, bool left_pdt);
@@ -100,7 +102,7 @@ void Expand(MPdtExpandArgs *args) {
                            std::get<4>(*args).keep_parentheses));
 }
 
-void Expand(const FstClass &ifst,
+void fstmpdtscript_EXPORT Expand(const FstClass &ifst,
             const std::vector<std::pair<int64_t, int64_t>> &parens,
             const std::vector<int64_t> &assignments, MutableFstClass *ofst,
             const MPdtExpandOptions &opts);
@@ -131,7 +133,7 @@ void Reverse(MPdtReverseArgs *args) {
             std::get<2>(*args)->begin());
 }
 
-void Reverse(const FstClass &ifst,
+void fstmpdtscript_EXPORT Reverse(const FstClass &ifst,
              const std::vector<std::pair<int64_t, int64_t>> &parens,
              std::vector<int64_t> *assignments, MutableFstClass *ofst);
 
@@ -158,7 +160,7 @@ void Info(MPdtInfoArgs *args) {
   mpdtinfo.Print();
 }
 
-void Info(const FstClass &ifst,
+void fstmpdtscript_EXPORT Info(const FstClass &ifst,
           const std::vector<std::pair<int64_t, int64_t>> &parens,
           const std::vector<int64_t> &assignments);
 
diff --git a/src/include/fst/extensions/mpdt/read_write_utils.h b/src/include/fst/extensions/mpdt/read_write_utils.h
index 92ea4db..feb66db 100644
--- a/src/include/fst/extensions/mpdt/read_write_utils.h
+++ b/src/include/fst/extensions/mpdt/read_write_utils.h
@@ -37,7 +37,7 @@ bool ReadLabelTriples(const std::string &source,
                       std::vector<std::pair<Label, Label>> *pairs,
                       std::vector<Label> *assignments,
                       bool allow_negative = false) {
-  std::ifstream fstrm(source);
+  std::ifstream fstrm(source, std::ios_base::in | std::ios_base::binary);
   if (!fstrm) {
     LOG(ERROR) << "ReadIntTriples: Can't open file: " << source;
     return false;
@@ -80,7 +80,7 @@ bool WriteLabelTriples(const std::string &source,
     LOG(ERROR) << "WriteLabelTriples: Pairs and assignments of different sizes";
     return false;
   }
-  std::ofstream fstrm(source);
+  std::ofstream fstrm(source, std::ios_base::out | std::ios_base::binary);
   if (!fstrm) {
     LOG(ERROR) << "WriteLabelTriples: Can't open file: " << source;
     return false;
diff --git a/src/include/fst/extensions/ngram/bitmap-index.h b/src/include/fst/extensions/ngram/bitmap-index.h
index 26e8498..b7174e3 100644
--- a/src/include/fst/extensions/ngram/bitmap-index.h
+++ b/src/include/fst/extensions/ngram/bitmap-index.h
@@ -24,6 +24,7 @@
 
 #include <fst/compat.h>
 #include <fst/log.h>
+#include <fst/exports/exports.h>
 
 // This class is a bitstring storage class with an index that allows
 // seeking to the Nth set or clear bit in time O(Log(N)) (or
@@ -86,8 +87,13 @@
 //
 // The select indices have 6.25% overhead together.
 
+#include <fst/exports/exports.h>
+
+
 namespace fst {
 
+    class fstngram_EXPORT BitmapIndex;
+
 class BitmapIndex {
  public:
   static size_t StorageSize(size_t num_bits) {
diff --git a/src/include/fst/extensions/ngram/ngram-fst.h b/src/include/fst/extensions/ngram/ngram-fst.h
index fbefea8..a1e3b33 100644
--- a/src/include/fst/extensions/ngram/ngram-fst.h
+++ b/src/include/fst/extensions/ngram/ngram-fst.h
@@ -26,6 +26,10 @@
 #include <cstddef>
 #include <cstdint>
 #include <cstring>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
 #include <iostream>
 #include <memory>
 #include <string>
@@ -403,6 +407,9 @@ class NGramFst : public ImplToExpandedFst<internal::NGramFstImpl<A>> {
       }
       return Read(strm, FstReadOptions(source));
     } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       return Read(std::cin, FstReadOptions("standard input"));
     }
   }
@@ -1032,5 +1039,6 @@ class ArcIterator<NGramFst<A>> : public ArcIteratorBase<A> {
   uint8_t flags_;
 };
 
+
 }  // namespace fst
 #endif  // FST_EXTENSIONS_NGRAM_NGRAM_FST_H_
diff --git a/src/include/fst/extensions/ngram/nthbit.h b/src/include/fst/extensions/ngram/nthbit.h
index 13018f2..507a583 100644
--- a/src/include/fst/extensions/ngram/nthbit.h
+++ b/src/include/fst/extensions/ngram/nthbit.h
@@ -24,7 +24,9 @@
 #include <arm_neon.h>
 #endif
 
+#include <fst/compat.h>
 #include <fst/log.h>
+#include <fst/exports/exports.h>
 
 #if defined(__BMI2__)  // Intel Bit Manipulation Instruction Set 2
 // PDEP requires BMI2; this is present starting with Haswell.
@@ -37,12 +39,12 @@ namespace fst {
 inline uint32_t nth_bit(uint64_t v, uint32_t r) {
   DCHECK_NE(v, 0);
   DCHECK_LE(0, r);
-  DCHECK_LT(r, __builtin_popcountll(v));
+  DCHECK_LT(r, popcountll(v));
 
   // PDEP example from https://stackoverflow.com/a/27453505
   // __builtin_ctzll is UB for 0, but the conditions above ensure that can't
   // happen.
-  return __builtin_ctzll(_pdep_u64(uint64_t{1} << r, v));
+  return popcountll(_pdep_u64(uint64_t{1} << r, v));
 }
 }  // namespace fst
 
@@ -71,13 +73,13 @@ extern const uint8_t kSelectInByte[2048];
 // Rank/Select Queries" by Sebastiano Vigna, p. 5, Algorithm 2, with
 // improvements from "Optimized Succinct Data Structures for Massive Data"
 // by Gog & Petri, 2014.
-inline uint32_t nth_bit(const uint64_t v, const uint32_t r) {
+inline uint32_t fstngram_EXPORT nth_bit(const uint64_t v, const uint32_t r) {
   constexpr uint64_t kOnesStep8 = 0x0101010101010101;
   constexpr uint64_t kMSBsStep8 = 0x80 * kOnesStep8;
 
   DCHECK_NE(v, 0);
   DCHECK_LE(0, r);
-  DCHECK_LT(r, __builtin_popcountll(v));
+  DCHECK_LT(r, popcountll(v));
 
 #if defined(__aarch64__)
   // Use the ARM64 CNT instruction to compute a byte-wise popcount.
@@ -104,7 +106,7 @@ inline uint32_t nth_bit(const uint64_t v, const uint32_t r) {
   // The first bit set is the high bit in the byte, so
   // num_trailing_zeros == 8 * byte_nr + 7 and the byte number is the
   // number of trailing zeros divided by 8.
-  const int byte_nr = __builtin_ctzll(b) >> 3;
+  const int byte_nr = ctzll(b) >> 3;
   const int shift = byte_nr << 3;
   // The top byte contains the whole-word popcount; we never need that.
   byte_sums <<= 8;
diff --git a/src/include/fst/extensions/pdt/getters.h b/src/include/fst/extensions/pdt/getters.h
index b0ba54f..a6d2756 100644
--- a/src/include/fst/extensions/pdt/getters.h
+++ b/src/include/fst/extensions/pdt/getters.h
@@ -23,13 +23,14 @@
 #include <fst/extensions/pdt/compose.h>
 #include <fst/extensions/pdt/replace.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
 
-bool GetPdtComposeFilter(std::string_view str, PdtComposeFilter *cf);
+bool fstpdtscript_EXPORT GetPdtComposeFilter(std::string_view str, PdtComposeFilter *cf);
 
-bool GetPdtParserType(std::string_view str, PdtParserType *pt);
+bool fstpdtscript_EXPORT GetPdtParserType(std::string_view str, PdtParserType *pt);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/extensions/pdt/pdtscript.h b/src/include/fst/extensions/pdt/pdtscript.h
index 87f9093..0f616b1 100644
--- a/src/include/fst/extensions/pdt/pdtscript.h
+++ b/src/include/fst/extensions/pdt/pdtscript.h
@@ -39,6 +39,7 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/fstscript.h>
 #include <fst/script/shortest-path.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -67,7 +68,7 @@ void Compose(PdtComposeArgs *args) {
   }
 }
 
-void Compose(const FstClass &ifst1, const FstClass &ifst2,
+void fstpdtscript_EXPORT Compose(const FstClass &ifst1, const FstClass &ifst2,
              const std::vector<std::pair<int64_t, int64_t>> &parens,
              MutableFstClass *ofst, const PdtComposeOptions &opts,
              bool left_pdt);
@@ -104,11 +105,11 @@ void Expand(PdtExpandArgs *args) {
                    .weight_threshold.GetWeight<typename Arc::Weight>())));
 }
 
-void Expand(const FstClass &ifst,
+void fstpdtscript_EXPORT Expand(const FstClass &ifst,
             const std::vector<std::pair<int64_t, int64_t>> &parens,
             MutableFstClass *ofst, const PdtExpandOptions &opts);
 
-void Expand(const FstClass &ifst,
+void fstpdtscript_EXPORT Expand(const FstClass &ifst,
             const std::vector<std::pair<int64_t, int64_t>> &parens,
             MutableFstClass *ofst, bool connect, bool keep_parentheses,
             const WeightClass &weight_threshold);
@@ -141,7 +142,7 @@ void Replace(PdtReplaceArgs *args) {
             std::get<2>(*args)->begin());
 }
 
-void Replace(const std::vector<std::pair<int64_t, const FstClass *>> &pairs,
+void fstpdtscript_EXPORT Replace(const std::vector<std::pair<int64_t, const FstClass *>> &pairs,
              MutableFstClass *ofst,
              std::vector<std::pair<int64_t, int64_t>> *parens, int64_t root,
              PdtParserType parser_type = PdtParserType::LEFT,
@@ -168,7 +169,7 @@ void Reverse(PdtReverseArgs *args) {
   Reverse(fst, typed_parens, ofst);
 }
 
-void Reverse(const FstClass &ifst,
+void fstpdtscript_EXPORT Reverse(const FstClass &ifst,
              const std::vector<std::pair<int64_t, int64_t>> &,
              MutableFstClass *ofst);
 
@@ -228,7 +229,7 @@ void ShortestPath(PdtShortestPathArgs *args) {
   }
 }
 
-void ShortestPath(
+void fstpdtscript_EXPORT ShortestPath(
     const FstClass &ifst,
     const std::vector<std::pair<int64_t, int64_t>> &parens,
     MutableFstClass *ofst,
@@ -253,7 +254,7 @@ void Info(PdtInfoArgs *args) {
   pdtinfo.Print();
 }
 
-void Info(const FstClass &ifst,
+void fstpdtscript_EXPORT Info(const FstClass &ifst,
           const std::vector<std::pair<int64_t, int64_t>> &parens);
 
 }  // namespace script
diff --git a/src/include/fst/extensions/special/phi-fst.h b/src/include/fst/extensions/special/phi-fst.h
index 482123f..c5a35b0 100644
--- a/src/include/fst/extensions/special/phi-fst.h
+++ b/src/include/fst/extensions/special/phi-fst.h
@@ -27,10 +27,12 @@
 #include <fst/const-fst.h>
 #include <fst/matcher-fst.h>
 #include <fst/matcher.h>
+#include <fst/register.h>
+#include <fst/exports/exports.h>
 
-DECLARE_int64(phi_fst_phi_label);
-DECLARE_bool(phi_fst_phi_loop);
-DECLARE_string(phi_fst_rewrite_mode);
+DECLARE_export_int64(phi_fst_phi_label,  fstspecial_EXPORT);
+DECLARE_export_bool(phi_fst_phi_loop, fstspecial_EXPORT);
+DECLARE_export_string(phi_fst_rewrite_mode, fstspecial_EXPORT);
 
 namespace fst {
 namespace internal {
diff --git a/src/include/fst/extensions/special/rho-fst.h b/src/include/fst/extensions/special/rho-fst.h
index b2e5b82..c63463d 100644
--- a/src/include/fst/extensions/special/rho-fst.h
+++ b/src/include/fst/extensions/special/rho-fst.h
@@ -27,9 +27,11 @@
 #include <fst/const-fst.h>
 #include <fst/matcher-fst.h>
 #include <fst/matcher.h>
+#include <fst/register.h>
+#include <fst/exports/exports.h>
 
-DECLARE_int64(rho_fst_rho_label);
-DECLARE_string(rho_fst_rewrite_mode);
+DECLARE_export_int64(rho_fst_rho_label, fstspecial_EXPORT);
+DECLARE_export_string(rho_fst_rewrite_mode, fstspecial_EXPORT);
 
 namespace fst {
 namespace internal {
@@ -168,6 +170,7 @@ using OutputRhoFst =
 
 using StdOutputRhoFst = OutputRhoFst<StdArc>;
 
+
 }  // namespace fst
 
 #endif  // FST_EXTENSIONS_SPECIAL_RHO_FST_H_
diff --git a/src/include/fst/extensions/special/sigma-fst.h b/src/include/fst/extensions/special/sigma-fst.h
index f6c2f63..28bcba4 100644
--- a/src/include/fst/extensions/special/sigma-fst.h
+++ b/src/include/fst/extensions/special/sigma-fst.h
@@ -27,9 +27,11 @@
 #include <fst/const-fst.h>
 #include <fst/matcher-fst.h>
 #include <fst/matcher.h>
+#include <fst/register.h>
+#include <fst/exports/exports.h>
 
-DECLARE_int64(sigma_fst_sigma_label);
-DECLARE_string(sigma_fst_rewrite_mode);
+DECLARE_export_int64(sigma_fst_sigma_label, fstspecial_EXPORT);
+DECLARE_export_string(sigma_fst_rewrite_mode, fstspecial_EXPORT);
 
 namespace fst {
 namespace internal {
diff --git a/src/include/fst/flags.h b/src/include/fst/flags.h
index 9c419ce..c08e514 100644
--- a/src/include/fst/flags.h
+++ b/src/include/fst/flags.h
@@ -32,6 +32,22 @@
 
 #include <fst/lock.h>
 
+#include <fst/exports/exports.h>
+
+#define DECLARE_bool(name) extern bool FST_FLAGS_##name
+#define DECLARE_string(name) extern std::string FST_FLAGS_##name
+#define DECLARE_int32(name) extern int32_t FST_FLAGS_##name
+#define DECLARE_int64(name) extern int64_t FST_FLAGS_##name
+#define DECLARE_uint64(name) extern uint64_t FST_FLAGS_##name
+#define DECLARE_double(name) extern double FST_FLAGS_##name
+
+#define DECLARE_export_bool(name, export_macro) extern bool export_macro FST_FLAGS_##name
+#define DECLARE_export_string(name, export_macro) extern std::string export_macro FST_FLAGS_##name
+#define DECLARE_export_int32(name, export_macro) extern int32_t export_macro FST_FLAGS_##name
+#define DECLARE_export_int64(name, export_macro) extern int64_t export_macro FST_FLAGS_##name
+#define DECLARE_export_uint64(name, export_macro) extern uint64_t export_macro FST_FLAGS_##name
+#define DECLARE_export_double(name, export_macro) extern double export_macro FST_FLAGS_##name
+
 // FLAGS USAGE:
 //
 // Definition example:
@@ -49,12 +65,6 @@
 //
 // ShowUsage() can be used to print out command and flag usage.
 
-#define DECLARE_bool(name) extern bool FST_FLAGS_ ## name
-#define DECLARE_string(name) extern std::string FST_FLAGS_##name
-#define DECLARE_int32(name) extern int32_t FST_FLAGS_##name
-#define DECLARE_int64(name) extern int64_t FST_FLAGS_##name
-#define DECLARE_uint64(name) extern uint64_t FST_FLAGS_##name
-#define DECLARE_double(name) extern double FST_FLAGS_ ## name
 
 template <typename T>
 struct FlagDescription {
@@ -73,12 +83,32 @@ struct FlagDescription {
   const T default_value;
 };
 
+class FlagRegisterBase { };
+
+class FlagSingleton {
+public:
+
+    template <class RegisterType>
+    std::shared_ptr<RegisterType> GetRegister() {
+
+        std::string type_name = typeid(RegisterType).name();
+        if (registry.find(type_name) == registry.end()) {
+            std::shared_ptr<RegisterType> r = std::make_shared<RegisterType>();
+            registry[type_name] = std::static_pointer_cast <FlagRegisterBase>(r);
+        }
+        return  std::static_pointer_cast <RegisterType>(registry[type_name]);
+    }
+private:
+    std::map<std::string, std::shared_ptr<FlagRegisterBase>> registry;
+};
+
+fst_EXPORT FlagSingleton& GetFlagSingleton();
+
 template <typename T>
-class FlagRegister {
+class FlagRegister: public FlagRegisterBase {
  public:
   static FlagRegister<T> *GetRegister() {
-    static auto reg = new FlagRegister<T>;
-    return reg;
+      return GetFlagSingleton().GetRegister<FlagRegister<T>>().get();
   }
 
   const FlagDescription<T> &GetFlagDescription(const std::string &name) const {
@@ -181,8 +211,7 @@ template <typename T>
 class FlagRegisterer {
  public:
   FlagRegisterer(const std::string &name, const FlagDescription<T> &desc) {
-    auto registr = FlagRegister<T>::GetRegister();
-    registr->SetDescription(name, desc);
+    GetFlagSingleton().GetRegister<FlagRegister<T>>()->SetDescription(name, desc);
   }
 
  private:
@@ -192,9 +221,9 @@ class FlagRegisterer {
 
 
 #define DEFINE_VAR(type, name, value, doc)                                    \
-  type FST_FLAGS_ ## name = value;                                            \
+  type FST_FLAGS_##name = value;                                            \
   static FlagRegisterer<type>                                                 \
-  name ## _flags_registerer(#name, FlagDescription<type>(&FST_FLAGS_ ## name, \
+  name ##_flags_registerer(#name, FlagDescription<type>(&FST_FLAGS_##name, \
                                                          doc,                 \
                                                          #type,               \
                                                          __FILE__,            \
@@ -202,7 +231,7 @@ class FlagRegisterer {
 
 #define DEFINE_bool(name, value, doc) DEFINE_VAR(bool, name, value, doc)
 #define DEFINE_string(name, value, doc) \
-  DEFINE_VAR(std::string, name, value, doc)
+ DEFINE_VAR(std::string, name, value, doc)
 #define DEFINE_int32(name, value, doc) DEFINE_VAR(int32_t, name, value, doc)
 #define DEFINE_int64(name, value, doc) DEFINE_VAR(int64_t, name, value, doc)
 #define DEFINE_uint64(name, value, doc) DEFINE_VAR(uint64_t, name, value, doc)
@@ -210,9 +239,9 @@ class FlagRegisterer {
 
 
 // Temporary directory.
-DECLARE_string(tmpdir);
+DECLARE_export_string(tmpdir, fst_EXPORT);
 
-void SetFlags(const char *usage, int *argc, char ***argv, bool remove_flags,
+void fst_EXPORT SetFlags(const char *usage, int *argc, char ***argv, bool remove_flags,
               const char *src = "");
 
 // This is an unpleasant hack around SetFlag API.
@@ -229,6 +258,6 @@ inline void InitFst(const char *usage, int *argc, char ***argv, bool rmflags) {
   return SetFlags(usage, argc, argv, rmflags);
 }
 
-void ShowUsage(bool long_usage = true);
+void fst_EXPORT ShowUsage(bool long_usage = true);
 
 #endif  // FST_FLAGS_H_
diff --git a/src/include/fst/fst-decl.h b/src/include/fst/fst-decl.h
index 0a0f679..af9ee1b 100644
--- a/src/include/fst/fst-decl.h
+++ b/src/include/fst/fst-decl.h
@@ -26,14 +26,15 @@
 #include <memory>  // for allocator<>
 
 #include <fst/windows_defs.inc>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
 // Symbol table and iterator.
 
-class SymbolTable;
+class fst_EXPORT SymbolTable;
 
-class SymbolTableIterator;
+class fst_EXPORT SymbolTableIterator;
 
 // Weight templates and weights.
 
diff --git a/src/include/fst/fst.h b/src/include/fst/fst.h
index 80d1150..86e3a91 100644
--- a/src/include/fst/fst.h
+++ b/src/include/fst/fst.h
@@ -27,6 +27,10 @@
 #include <cmath>
 #include <cstddef>
 #include <cstdint>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
 #include <iostream>
 #include <memory>
 #include <sstream>
@@ -44,17 +48,19 @@
 #include <fst/register.h>
 #include <fst/symbol-table.h>
 #include <fst/util.h>
+#include <fst/exports/exports.h>
 #include <string_view>
 
 
-DECLARE_bool(fst_align);
+DECLARE_export_bool(fst_align, fst_EXPORT);
+DECLARE_export_bool(fst_verify_properties, fst_EXPORT);
 
 namespace fst {
 
 // Identifies stream data as an FST (and its endianity).
 inline constexpr int32_t kFstMagicNumber = 2125659606;
 
-class FstHeader;
+class fst_EXPORT FstHeader;
 
 template <class Arc>
 struct StateIteratorData;
@@ -65,7 +71,7 @@ struct ArcIteratorData;
 template <class Arc>
 class MatcherBase;
 
-struct FstReadOptions {
+struct fst_EXPORT FstReadOptions {
   // FileReadMode(s) are advisory, there are many conditions than prevent a
   // file from being mapped, READ mode will be selected in these cases with
   // a warning indicating why it was chosen.
@@ -98,7 +104,7 @@ struct FstReadOptions {
   std::string DebugString() const;
 };
 
-struct FstWriteOptions {
+struct fst_EXPORT FstWriteOptions {
   std::string source;   // Where you're writing to.
   bool write_header;    // Write the header?
   bool write_isymbols;  // Write input symbols?
@@ -285,6 +291,9 @@ class Fst {
       }
       return Read(strm, FstReadOptions(source));
     } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       return Read(std::cin, FstReadOptions("standard input"));
     }
   }
@@ -343,6 +352,9 @@ class Fst {
       }
       return true;
     } else {
+      #ifdef _WIN32
+        _setmode(_fileno(stdout), _O_BINARY);
+      #endif
       return Write(std::cout, FstWriteOptions("standard output"));
     }
   }
diff --git a/src/include/fst/generic-register.h b/src/include/fst/generic-register.h
index 765ebce..b677ed2 100644
--- a/src/include/fst/generic-register.h
+++ b/src/include/fst/generic-register.h
@@ -28,8 +28,10 @@
 #endif
 #include <map>
 #include <string>
+#include <typeinfo>
 
 #include <fst/log.h>
+#include <fst/exports/exports.h>
 
 // Generic class representing a globally-stored correspondence between
 // objects of KeyType and EntryType.
@@ -44,6 +46,7 @@
 // (think CRTP). This is to allow GetRegister() to instantiate and return an
 // object of the appropriate type.
 
+
 namespace fst {
 
 namespace internal {
@@ -58,16 +61,36 @@ struct KeyLookupReferenceType<std::string> {
 };
 }  // namespace internal
 
+class RegisterBase { };
+
+class Singleton {
+public:
+
+    template <class RegisterType>
+    std::shared_ptr<RegisterType> GetRegister() {
+
+        std::string type_name = typeid(RegisterType).name();
+        if (registry.find(type_name) == registry.end()) {
+            std::shared_ptr<RegisterType> r = std::make_shared<RegisterType>();
+            registry[type_name] = std::static_pointer_cast <RegisterBase>(r);
+        }
+        return  std::static_pointer_cast <RegisterType>(registry[type_name]);
+    }
+private:
+    std::map<std::string, std::shared_ptr<RegisterBase>> registry;
+};
+
+fst_EXPORT Singleton& GetSingleton();
+
 template <class KeyType, class EntryType, class RegisterType>
-class GenericRegister {
+class GenericRegister : public RegisterBase {
  public:
   using Key = KeyType;
   using KeyLookupRef = typename internal::KeyLookupReferenceType<KeyType>::type;
   using Entry = EntryType;
 
   static RegisterType *GetRegister() {
-    static auto reg = new RegisterType;
-    return reg;
+      return GetSingleton().GetRegister<RegisterType>().get();
   }
 
   void SetEntry(const KeyType &key, const EntryType &entry) {
@@ -133,6 +156,7 @@ class GenericRegister {
   std::map<KeyType, EntryType, std::less<>> register_table_;
 };
 
+
 // Generic register-er class capable of creating new register entries in the
 // given RegisterType template parameter. This type must define types Key and
 // Entry, and have appropriate static GetRegister() and instance SetEntry()
@@ -145,7 +169,7 @@ class GenericRegisterer {
   using Entry = typename RegisterType::Entry;
 
   GenericRegisterer(Key key, Entry entry) {
-    RegisterType::GetRegister()->SetEntry(key, entry);
+      GetSingleton().GetRegister<RegisterType>()->SetEntry(key, entry);
   }
 };
 
diff --git a/src/include/fst/log.h b/src/include/fst/log.h
index 66be8ae..ef796c2 100644
--- a/src/include/fst/log.h
+++ b/src/include/fst/log.h
@@ -26,8 +26,9 @@
 #include <string_view>
 
 #include <fst/flags.h>
+#include <fst/exports/exports.h>
 
-DECLARE_int32(v);
+DECLARE_export_int32(v, fst_EXPORT);
 
 class LogMessage {
  public:
diff --git a/src/include/fst/lookahead-matcher.h b/src/include/fst/lookahead-matcher.h
index 52399e2..94cf805 100644
--- a/src/include/fst/lookahead-matcher.h
+++ b/src/include/fst/lookahead-matcher.h
@@ -34,9 +34,10 @@
 #include <fst/fst.h>
 #include <fst/label-reachable.h>
 #include <fst/matcher.h>
+#include <fst/exports/exports.h>
 
-DECLARE_string(save_relabel_ipairs);
-DECLARE_string(save_relabel_opairs);
+DECLARE_export_string(save_relabel_ipairs, fst_EXPORT);
+DECLARE_export_string(save_relabel_opairs, fst_EXPORT);
 
 namespace fst {
 
diff --git a/src/include/fst/mapped-file.h b/src/include/fst/mapped-file.h
index 18a478f..a16c2b8 100644
--- a/src/include/fst/mapped-file.h
+++ b/src/include/fst/mapped-file.h
@@ -28,6 +28,7 @@
 #include <string>
 
 #include <fst/flags.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
@@ -48,7 +49,7 @@ struct MemoryRegion {
 #endif
 };
 
-class MappedFile {
+class fst_EXPORT MappedFile {
  public:
   ~MappedFile();
 
diff --git a/src/include/fst/mutable-fst.h b/src/include/fst/mutable-fst.h
index 1adb88d..2eacabb 100644
--- a/src/include/fst/mutable-fst.h
+++ b/src/include/fst/mutable-fst.h
@@ -30,6 +30,11 @@
 #include <string>
 #include <utility>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/log.h>
 #include <fstream>
@@ -161,6 +166,9 @@ class MutableFst : public ExpandedFst<A> {
         }
         return Read(strm, FstReadOptions(source));
       } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
         return Read(std::cin, FstReadOptions("standard input"));
       }
     } else {  // Converts to 'convert_type' if not mutable.
diff --git a/src/include/fst/properties.h b/src/include/fst/properties.h
index c7a110d..1be417a 100644
--- a/src/include/fst/properties.h
+++ b/src/include/fst/properties.h
@@ -28,6 +28,7 @@
 #include <fst/compat.h>
 #include <fst/log.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
@@ -348,46 +349,46 @@ inline uint64_t DeleteAllStatesProperties(uint64_t inprops,
 
 inline uint64_t DeleteArcsProperties(uint64_t inprops);
 
-uint64_t ClosureProperties(uint64_t inprops, bool star, bool delayed = false);
+uint64_t fst_EXPORT ClosureProperties(uint64_t inprops, bool star, bool delayed = false);
 
-uint64_t ComplementProperties(uint64_t inprops);
+uint64_t fst_EXPORT ComplementProperties(uint64_t inprops);
 
-uint64_t ComposeProperties(uint64_t inprops1, uint64_t inprops2);
+uint64_t fst_EXPORT ComposeProperties(uint64_t inprops1, uint64_t inprops2);
 
-uint64_t ConcatProperties(uint64_t inprops1, uint64_t inprops2,
+uint64_t fst_EXPORT ConcatProperties(uint64_t inprops1, uint64_t inprops2,
                           bool delayed = false);
 
-uint64_t DeterminizeProperties(uint64_t inprops, bool has_subsequential_label,
+uint64_t fst_EXPORT DeterminizeProperties(uint64_t inprops, bool has_subsequential_label,
                                bool distinct_psubsequential_labels);
 
-uint64_t FactorWeightProperties(uint64_t inprops);
+uint64_t fst_EXPORT FactorWeightProperties(uint64_t inprops);
 
-uint64_t InvertProperties(uint64_t inprops);
+uint64_t fst_EXPORT InvertProperties(uint64_t inprops);
 
-uint64_t ProjectProperties(uint64_t inprops, bool project_input);
+uint64_t fst_EXPORT ProjectProperties(uint64_t inprops, bool project_input);
 
-uint64_t RandGenProperties(uint64_t inprops, bool weighted);
+uint64_t fst_EXPORT RandGenProperties(uint64_t inprops, bool weighted);
 
-uint64_t RelabelProperties(uint64_t inprops);
+uint64_t fst_EXPORT RelabelProperties(uint64_t inprops);
 
-uint64_t ReplaceProperties(const std::vector<uint64_t> &inprops, size_t root,
+uint64_t fst_EXPORT ReplaceProperties(const std::vector<uint64_t> &inprops, size_t root,
                            bool epsilon_on_call, bool epsilon_on_return,
                            bool out_epsilon_on_call, bool out_epsilon_on_return,
                            bool replace_transducer, bool no_empty_fst,
                            bool all_ilabel_sorted, bool all_olabel_sorted,
                            bool all_negative_or_dense);
 
-uint64_t ReverseProperties(uint64_t inprops, bool has_superinitial);
+uint64_t fst_EXPORT ReverseProperties(uint64_t inprops, bool has_superinitial);
 
-uint64_t ReweightProperties(uint64_t inprops, bool added_start_epsilon);
+uint64_t fst_EXPORT ReweightProperties(uint64_t inprops, bool added_start_epsilon);
 
-uint64_t RmEpsilonProperties(uint64_t inprops, bool delayed = false);
+uint64_t fst_EXPORT RmEpsilonProperties(uint64_t inprops, bool delayed = false);
 
-uint64_t ShortestPathProperties(uint64_t props, bool tree = false);
+uint64_t fst_EXPORT ShortestPathProperties(uint64_t props, bool tree = false);
 
-uint64_t SynchronizeProperties(uint64_t inprops);
+uint64_t fst_EXPORT SynchronizeProperties(uint64_t inprops);
 
-uint64_t UnionProperties(uint64_t inprops1, uint64_t inprops2,
+uint64_t fst_EXPORT UnionProperties(uint64_t inprops1, uint64_t inprops2,
                          bool delayed = false);
 
 // Definitions of inlined functions.
@@ -491,7 +492,7 @@ uint64_t AddArcProperties(uint64_t inprops, typename Arc::StateId s,
 
 namespace internal {
 
-extern const std::string_view PropertyNames[];
+extern const std::string_view fst_EXPORT PropertyNames[];
 
 // For a binary property, the bit is always returned set. For a trinary (i.e.,
 // two-bit) property, both bits are returned set iff either corresponding input
diff --git a/src/include/fst/register.h b/src/include/fst/register.h
index af1b360..12bf190 100644
--- a/src/include/fst/register.h
+++ b/src/include/fst/register.h
@@ -27,6 +27,7 @@
 #include <fst/compat.h>
 #include <fst/generic-register.h>
 #include <fst/util.h>
+#include <fst/exports/exports.h>
 
 
 #include <fst/log.h>
@@ -74,11 +75,21 @@ class FstRegister : public GenericRegister<std::string, FstRegisterEntry<Arc>,
   std::string ConvertKeyToSoFilename(std::string_view key) const override {
     std::string legal_type(key);
     ConvertToLegalCSymbol(&legal_type);
-    legal_type.append("-fst.so");
+    legal_type.append("-fst");
+    #ifdef _WIN32
+        legal_type.append(".dll");
+    #elif defined __APPLE__
+        legal_type.append(".dylib");
+    #else
+        legal_type.append(".so");
+
+    #endif // _WIN32
+
     return legal_type;
   }
 };
 
+
 // This class registers an FST type for generic reading and creating.
 // The type must have a default constructor and a copy constructor from
 // Fst<Arc>.
@@ -92,7 +103,6 @@ class FstRegisterer : public GenericRegisterer<FstRegister<typename FST::Arc>> {
   FstRegisterer()
       : GenericRegisterer<FstRegister<typename FST::Arc>>(FST().Type(),
                                                           BuildEntry()) {}
-
  private:
   static Fst<Arc> *ReadGeneric(std::istream &strm, const FstReadOptions &opts) {
     static_assert(std::is_base_of_v<Fst<Arc>, FST>,
diff --git a/src/include/fst/script/arc-class.h b/src/include/fst/script/arc-class.h
index 1a27704..d88145d 100644
--- a/src/include/fst/script/arc-class.h
+++ b/src/include/fst/script/arc-class.h
@@ -21,6 +21,7 @@
 #include <cstdint>
 
 #include <fst/script/weight-class.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -28,7 +29,7 @@ namespace script {
 // A struct representing an arc while ignoring arc type. It is passed as an
 // argument to AddArc.
 
-struct ArcClass {
+struct fstscript_EXPORT ArcClass {
   template <class Arc>
   explicit ArcClass(const Arc &arc)
       : ilabel(arc.ilabel),
diff --git a/src/include/fst/script/arcfilter-impl.h b/src/include/fst/script/arcfilter-impl.h
index e8acb6f..ead8af9 100644
--- a/src/include/fst/script/arcfilter-impl.h
+++ b/src/include/fst/script/arcfilter-impl.h
@@ -19,10 +19,11 @@
 #define FST_SCRIPT_ARCFILTER_IMPL_H_
 
 #include <cstdint>
+#include <fst/exports/exports.h>
 
 namespace fst::script {
 
-enum class ArcFilterType : uint8_t {
+enum class fstscript_EXPORT ArcFilterType : uint8_t {
   ANY,
   EPSILON,
   INPUT_EPSILON,
diff --git a/src/include/fst/script/arciterator-class.h b/src/include/fst/script/arciterator-class.h
index 422780b..e8eaffd 100644
--- a/src/include/fst/script/arciterator-class.h
+++ b/src/include/fst/script/arciterator-class.h
@@ -24,6 +24,8 @@
 
 #include <fst/fstlib.h>
 #include <fst/script/fst-class.h>
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
 
 // Scripting API support for ArcIterator.
 //
@@ -34,7 +36,7 @@ namespace fst {
 namespace script {
 
 // Non-mutable arc iterators.
-
+    class fstscript_EXPORT ArcIteratorImplBase;
 // Virtual interface implemented by each concrete ArcIteratorImpl<F>.
 class ArcIteratorImplBase {
  public:
@@ -221,6 +223,7 @@ void InitMutableArcIteratorClass(InitMutableArcIteratorClassArgs *args) {
                                                           std::get<1>(*args));
 }
 
+
 }  // namespace script
 }  // namespace fst
 
diff --git a/src/include/fst/script/arcsort.h b/src/include/fst/script/arcsort.h
index b4fa8aa..243344b 100644
--- a/src/include/fst/script/arcsort.h
+++ b/src/include/fst/script/arcsort.h
@@ -24,10 +24,13 @@
 #include <fst/arcsort.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
-enum class ArcSortType : uint8_t { ILABEL, OLABEL };
+enum class fstscript_EXPORT ArcSortType : uint8_t { ILABEL, OLABEL };
 
 using FstArcSortArgs = std::pair<MutableFstClass *, ArcSortType>;
 
@@ -48,7 +51,7 @@ void ArcSort(FstArcSortArgs *args) {
   }
 }
 
-void ArcSort(MutableFstClass *ofst, ArcSortType);
+void fstscript_EXPORT ArcSort(MutableFstClass *ofst, ArcSortType);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/closure.h b/src/include/fst/script/closure.h
index 4ec5c01..ab0f809 100644
--- a/src/include/fst/script/closure.h
+++ b/src/include/fst/script/closure.h
@@ -23,6 +23,9 @@
 #include <fst/closure.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -34,7 +37,8 @@ void Closure(FstClosureArgs *args) {
   Closure(fst, std::get<1>(*args));
 }
 
-void Closure(MutableFstClass *ofst, ClosureType closure_type);
+void fstscript_EXPORT Closure(MutableFstClass *ofst, ClosureType closure_type);
+
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/compile-impl.h b/src/include/fst/script/compile-impl.h
index 5fe1b65..e18b1dc 100644
--- a/src/include/fst/script/compile-impl.h
+++ b/src/include/fst/script/compile-impl.h
@@ -27,13 +27,13 @@
 #include <vector>
 
 #include <fst/fst.h>
+#include <fst/string.h>
 #include <fst/symbol-table.h>
 #include <fst/util.h>
 #include <fst/vector-fst.h>
 #include <unordered_map>
 #include <string_view>
-
-DECLARE_string(fst_field_separator);
+#include <fst/exports/exports.h>
 
 namespace fst {
 
diff --git a/src/include/fst/script/compile.h b/src/include/fst/script/compile.h
index b3fbdcf..23c3d1d 100644
--- a/src/include/fst/script/compile.h
+++ b/src/include/fst/script/compile.h
@@ -25,6 +25,10 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/compile-impl.h>
 #include <fst/script/fst-class.h>
+#include <fst/exports/exports.h>
+
+
+#include <fst/script/script-impl.h>
 
 namespace fst {
 namespace script {
@@ -38,7 +42,7 @@ namespace script {
 // this struct is only used to pass them deeper in the call graph.
 // Be sure you understand why this is so before using this struct
 // for anything else!
-struct FstCompileInnerArgs {
+struct fstscript_EXPORT FstCompileInnerArgs {
   std::istream &istrm;
   const std::string &source;
   const std::string &fst_type;
@@ -79,13 +83,13 @@ void CompileInternal(FstCompileArgs *args) {
   args->retval = fst ? std::make_unique<FstClass>(std::move(fst)) : nullptr;
 }
 
-void Compile(std::istream &istrm, const std::string &source,
+void fstscript_EXPORT Compile(std::istream &istrm, const std::string &source,
              const std::string &dest, const std::string &fst_type,
              const std::string &arc_type, const SymbolTable *isyms,
              const SymbolTable *osyms, const SymbolTable *ssyms, bool accep,
              bool ikeep, bool okeep, bool nkeep, bool allow_negative_labels);
 
-std::unique_ptr<FstClass> CompileInternal(
+std::unique_ptr<FstClass> fstscript_EXPORT CompileInternal(
     std::istream &istrm, const std::string &source, const std::string &fst_type,
     const std::string &arc_type, const SymbolTable *isyms,
     const SymbolTable *osyms, const SymbolTable *ssyms, bool accep, bool ikeep,
diff --git a/src/include/fst/script/compose.h b/src/include/fst/script/compose.h
index 65a8f1a..f441d03 100644
--- a/src/include/fst/script/compose.h
+++ b/src/include/fst/script/compose.h
@@ -23,6 +23,9 @@
 #include <fst/compose.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -38,7 +41,7 @@ void Compose(FstComposeArgs *args) {
   Compose(ifst1, ifst2, ofst, opts);
 }
 
-void Compose(const FstClass &ifst1, const FstClass &ifst2,
+void fstscript_EXPORT Compose(const FstClass &ifst1, const FstClass &ifst2,
              MutableFstClass *ofst,
              const ComposeOptions &opts = ComposeOptions());
 
diff --git a/src/include/fst/script/concat.h b/src/include/fst/script/concat.h
index 845e9ea..27e9d5d 100644
--- a/src/include/fst/script/concat.h
+++ b/src/include/fst/script/concat.h
@@ -23,6 +23,9 @@
 #include <fst/concat.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -59,11 +62,11 @@ void Concat(FstConcatArgs3 *args) {
   Concat(typed_fsts1, fst2);
 }
 
-void Concat(MutableFstClass *fst1, const FstClass &fst2);
+void fstscript_EXPORT Concat(MutableFstClass *fst1, const FstClass &fst2);
 
-void Concat(const FstClass &fst1, MutableFstClass *fst2);
+void fstscript_EXPORT Concat(const FstClass &fst1, MutableFstClass *fst2);
 
-void Concat(const std::vector<FstClass *> &fsts1, MutableFstClass *fst2);
+void fstscript_EXPORT Concat(const std::vector<FstClass *> &fsts1, MutableFstClass *fst2);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/connect.h b/src/include/fst/script/connect.h
index 344735b..680c331 100644
--- a/src/include/fst/script/connect.h
+++ b/src/include/fst/script/connect.h
@@ -21,6 +21,9 @@
 #include <fst/connect.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -29,7 +32,7 @@ void Connect(MutableFstClass *fst) {
   Connect(fst->GetMutableFst<Arc>());
 }
 
-void Connect(MutableFstClass *fst);
+void fstscript_EXPORT Connect(MutableFstClass *fst);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/convert.h b/src/include/fst/script/convert.h
index abbef44..36a6445 100644
--- a/src/include/fst/script/convert.h
+++ b/src/include/fst/script/convert.h
@@ -26,6 +26,9 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -43,7 +46,7 @@ void Convert(FstConvertArgs *args) {
       result ? std::make_unique<FstClass>(std::move(result)) : nullptr;
 }
 
-std::unique_ptr<FstClass> Convert(const FstClass &fst,
+std::unique_ptr<FstClass> fstscript_EXPORT Convert(const FstClass &fst,
                                   const std::string &new_type);
 
 }  // namespace script
diff --git a/src/include/fst/script/decode.h b/src/include/fst/script/decode.h
index 947a801..7c8e0a8 100644
--- a/src/include/fst/script/decode.h
+++ b/src/include/fst/script/decode.h
@@ -25,6 +25,9 @@
 #include <fst/script/encodemapper-class.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -37,7 +40,7 @@ void Decode(FstDecodeArgs *args) {
   Decode(fst, mapper);
 }
 
-void Decode(MutableFstClass *fst, const EncodeMapperClass &encoder);
+void fstscript_EXPORT Decode(MutableFstClass *fst, const EncodeMapperClass &encoder);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/determinize.h b/src/include/fst/script/determinize.h
index 848b8af..2d5afaf 100644
--- a/src/include/fst/script/determinize.h
+++ b/src/include/fst/script/determinize.h
@@ -25,6 +25,9 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/weight-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -66,7 +69,7 @@ void Determinize(FstDeterminizeArgs *args) {
   Determinize(ifst, ofst, detargs);
 }
 
-void Determinize(const FstClass &ifst, MutableFstClass *ofst,
+void fstscript_EXPORT Determinize(const FstClass &ifst, MutableFstClass *ofst,
                  const DeterminizeOptions &opts);
 
 }  // namespace script
diff --git a/src/include/fst/script/difference.h b/src/include/fst/script/difference.h
index bd02f77..3e48655 100644
--- a/src/include/fst/script/difference.h
+++ b/src/include/fst/script/difference.h
@@ -24,6 +24,9 @@
 #include <fst/script/compose.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -39,10 +42,9 @@ void Difference(FstDifferenceArgs *args) {
   Difference(ifst1, ifst2, ofst, opts);
 }
 
-void Difference(const FstClass &ifst1, const FstClass &ifst2,
+void fstscript_EXPORT Difference(const FstClass &ifst1, const FstClass &ifst2,
                 MutableFstClass *ofst,
                 const ComposeOptions &opts = ComposeOptions());
-
 }  // namespace script
 }  // namespace fst
 
diff --git a/src/include/fst/script/disambiguate.h b/src/include/fst/script/disambiguate.h
index ec46baf..66d801c 100644
--- a/src/include/fst/script/disambiguate.h
+++ b/src/include/fst/script/disambiguate.h
@@ -26,6 +26,9 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/weight-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -60,7 +63,7 @@ void Disambiguate(FstDisambiguateArgs *args) {
   Disambiguate(ifst, ofst, disargs);
 }
 
-void Disambiguate(const FstClass &ifst, MutableFstClass *ofst,
+void fstscript_EXPORT Disambiguate(const FstClass &ifst, MutableFstClass *ofst,
                   const DisambiguateOptions &opts);
 
 }  // namespace script
diff --git a/src/include/fst/script/draw-impl.h b/src/include/fst/script/draw-impl.h
index 131e793..150d637 100644
--- a/src/include/fst/script/draw-impl.h
+++ b/src/include/fst/script/draw-impl.h
@@ -30,6 +30,7 @@
 #include <fst/util.h>
 #include <fst/script/fst-class.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
diff --git a/src/include/fst/script/draw.h b/src/include/fst/script/draw.h
index 8eeefb9..46d8682 100644
--- a/src/include/fst/script/draw.h
+++ b/src/include/fst/script/draw.h
@@ -24,6 +24,9 @@
 #include <fst/script/draw-impl.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -62,7 +65,7 @@ void Draw(FstDrawArgs *args) {
   fstdrawer.Draw(args->ostrm, args->dest);
 }
 
-void Draw(const FstClass &fst, const SymbolTable *isyms,
+void fstscript_EXPORT Draw(const FstClass &fst, const SymbolTable *isyms,
           const SymbolTable *osyms, const SymbolTable *ssyms, bool accep,
           const std::string &title, float width, float height, bool portrait,
           bool vertical, float ranksep, float nodesep, int fontsize,
diff --git a/src/include/fst/script/encode.h b/src/include/fst/script/encode.h
index 9543790..fc1c444 100644
--- a/src/include/fst/script/encode.h
+++ b/src/include/fst/script/encode.h
@@ -25,6 +25,9 @@
 #include <fst/script/encodemapper-class.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -37,7 +40,7 @@ void Encode(FstEncodeArgs *args) {
   Encode(fst, mapper);
 }
 
-void Encode(MutableFstClass *fst, EncodeMapperClass *mapper);
+void fstscript_EXPORT Encode(MutableFstClass *fst, EncodeMapperClass *mapper);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/encodemapper-class.h b/src/include/fst/script/encodemapper-class.h
index 0d67ec5..8d03252 100644
--- a/src/include/fst/script/encodemapper-class.h
+++ b/src/include/fst/script/encodemapper-class.h
@@ -25,16 +25,20 @@
 #include <utility>
 
 #include <fst/encode.h>
-#include <fst/generic-register.h>
 #include <fst/script/arc-class.h>
 #include <fst/script/fst-class.h>
+#include <fst/generic-register.h>
+#include <fst/exports/exports.h>
 #include <string_view>
 
+#include <fst/script/script-impl.h>
+
 // Scripting API support for EncodeMapper.
 
 namespace fst {
 namespace script {
 
+    class fstscript_EXPORT EncodeMapperImplBase;
 // Virtual interface implemented by each concrete EncodeMapperClassImpl<Arc>.
 class EncodeMapperImplBase {
  public:
@@ -259,7 +263,15 @@ class EncodeMapperClassIORegister
   std::string ConvertKeyToSoFilename(std::string_view key) const final {
     std::string legal_type(key);
     ConvertToLegalCSymbol(&legal_type);
-    legal_type.append("-arc.so");
+    legal_type.append("-arc");
+    #ifdef _WIN32
+        legal_type.append(".dll");
+    #elif defined __APPLE__
+        legal_type.append(".dylib");
+    #else
+        legal_type.append(".so");
+
+    #endif // _WIN32
     return legal_type;
   }
 };
diff --git a/src/include/fst/script/epsnormalize.h b/src/include/fst/script/epsnormalize.h
index e1890c7..e714123 100644
--- a/src/include/fst/script/epsnormalize.h
+++ b/src/include/fst/script/epsnormalize.h
@@ -23,6 +23,9 @@
 #include <fst/epsnormalize.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -36,7 +39,7 @@ void EpsNormalize(FstEpsNormalizeArgs *args) {
   EpsNormalize(ifst, ofst, std::get<2>(*args));
 }
 
-void EpsNormalize(const FstClass &ifst, MutableFstClass *ofst,
+void fstscript_EXPORT EpsNormalize(const FstClass &ifst, MutableFstClass *ofst,
                   EpsNormalizeType norm_type = EPS_NORM_INPUT);
 
 }  // namespace script
diff --git a/src/include/fst/script/equal.h b/src/include/fst/script/equal.h
index a564631..d2bf769 100644
--- a/src/include/fst/script/equal.h
+++ b/src/include/fst/script/equal.h
@@ -24,6 +24,9 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -38,7 +41,7 @@ void Equal(FstEqualArgs *args) {
   args->retval = Equal(fst1, fst2, std::get<2>(args->args));
 }
 
-bool Equal(const FstClass &fst1, const FstClass &fst2, float delta = kDelta);
+bool fstscript_EXPORT Equal(const FstClass &fst1, const FstClass &fst2, float delta = kDelta);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/equivalent.h b/src/include/fst/script/equivalent.h
index 55aebe1..6bedb94 100644
--- a/src/include/fst/script/equivalent.h
+++ b/src/include/fst/script/equivalent.h
@@ -24,6 +24,9 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -39,7 +42,7 @@ void Equivalent(FstEquivalentArgs *args) {
   args->retval = Equivalent(fst1, fst2, std::get<2>(args->args));
 }
 
-bool Equivalent(const FstClass &fst1, const FstClass &fst2,
+bool fstscript_EXPORT Equivalent(const FstClass &fst1, const FstClass &fst2,
                 float delta = kDelta);
 
 }  // namespace script
diff --git a/src/include/fst/script/fst-class.h b/src/include/fst/script/fst-class.h
index c0630b1..6e2d24a 100644
--- a/src/include/fst/script/fst-class.h
+++ b/src/include/fst/script/fst-class.h
@@ -29,10 +29,11 @@
 
 #include <fst/expanded-fst.h>
 #include <fst/fst.h>
-#include <fst/generic-register.h>
+#include <fst/exports/exports.h>
 #include <fst/mutable-fst.h>
 #include <fst/vector-fst.h>
 #include <fst/script/arc-class.h>
+#include <fst/script/fstscript-decl.h>
 #include <fst/script/weight-class.h>
 #include <string_view>
 
@@ -51,6 +52,7 @@ namespace script {
 // implementations (of which FstClassImpl is currently the only one) and
 // FstClass serves as the base class for all interfaces.
 
+    class fstscript_EXPORT FstClassBase;
 class FstClassBase {
  public:
   virtual const std::string &ArcType() const = 0;
@@ -71,7 +73,7 @@ class FstClassBase {
 };
 
 // Adds all the MutableFst methods.
-class FstClassImplBase : public FstClassBase {
+class fstscript_EXPORT FstClassImplBase : public FstClassBase {
  public:
   virtual bool AddArc(int64_t, const ArcClass &) = 0;
   virtual int64_t AddState() = 0;
@@ -296,8 +298,6 @@ class FstClassImpl : public FstClassImplBase {
 
 // BASE CLASS DEFINITIONS
 
-class MutableFstClass;
-
 class FstClass : public FstClassBase {
  public:
   FstClass() : impl_(nullptr) {}
@@ -622,7 +622,15 @@ class FstClassIORegister
   std::string ConvertKeyToSoFilename(std::string_view key) const final {
     std::string legal_type(key);
     ConvertToLegalCSymbol(&legal_type);
-    legal_type.append("-arc.so");
+    legal_type.append("-arc");
+    #ifdef _WIN32
+        legal_type.append(".dll");
+    #elif defined __APPLE__
+        legal_type.append(".dylib");
+    #else
+        legal_type.append(".so");
+
+    #endif // _WIN32
     return legal_type;
   }
 };
diff --git a/src/include/fst/script/fstscript-decl.h b/src/include/fst/script/fstscript-decl.h
index d5f171b..8c948b1 100644
--- a/src/include/fst/script/fstscript-decl.h
+++ b/src/include/fst/script/fstscript-decl.h
@@ -21,24 +21,25 @@
 #define FST_SCRIPT_FSTSCRIPT_DECL_H_
 
 #include <fst/fst-decl.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
 
-class ArcClass;
+class fstscript_EXPORT ArcClass;
 
-class ArcIteratorClass;
-class MutableArcIteratorClass;
+class fstscript_EXPORT ArcIteratorClass;
+class fstscript_EXPORT MutableArcIteratorClass;
 
-class EncodeMapperClass;
+class fstscript_EXPORT EncodeMapperClass;
 
-class FstClass;
-class MutableFstClass;
-class VectorFstClass;
+class fstscript_EXPORT FstClass;
+class fstscript_EXPORT MutableFstClass;
+class fstscript_EXPORT VectorFstClass;
 
-class StateIteratorClass;
+class fstscript_EXPORT StateIteratorClass;
 
-class WeightClass;
+class fstscript_EXPORT WeightClass;
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/fstscript.h b/src/include/fst/script/fstscript.h
index 6ecd6aa..7db77f6 100644
--- a/src/include/fst/script/fstscript.h
+++ b/src/include/fst/script/fstscript.h
@@ -84,6 +84,7 @@
 #include <fst/script/topsort.h>
 #include <fst/script/union.h>
 #include <fst/script/verify.h>
+#include <fst/exports/exports.h>
 
 // This class is necessary because registering each of the operations
 // separately overfills the stack, as there's so many of them.
diff --git a/src/include/fst/script/getters.h b/src/include/fst/script/getters.h
index 7dfa236..76e5eb5 100644
--- a/src/include/fst/script/getters.h
+++ b/src/include/fst/script/getters.h
@@ -39,33 +39,34 @@
 #include <fst/script/map.h>             // For MapType.
 #include <fst/script/script-impl.h>     // For RandArcSelection.
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
 
-bool GetArcFilterType(std::string_view str, ArcFilterType *arc_filter_type);
+bool fstscript_EXPORT GetArcFilterType(std::string_view str, ArcFilterType *arc_filter_type);
 
-bool GetArcSortType(std::string_view str, ArcSortType *sort_type);
+bool fstscript_EXPORT GetArcSortType(std::string_view str, ArcSortType *sort_type);
 
-bool GetClosureType(std::string_view str, ClosureType *closure_type);
+bool fstscript_EXPORT GetClosureType(std::string_view str, ClosureType *closure_type);
 
-bool GetComposeFilter(std::string_view str, ComposeFilter *compose_filter);
+bool fstscript_EXPORT GetComposeFilter(std::string_view str, ComposeFilter *compose_filter);
 
-bool GetDeterminizeType(std::string_view str, DeterminizeType *det_type);
+bool fstscript_EXPORT GetDeterminizeType(std::string_view str, DeterminizeType *det_type);
 
-inline uint8_t GetEncodeFlags(bool encode_labels, bool encode_weights) {
+inline uint8_t fstscript_EXPORT GetEncodeFlags(bool encode_labels, bool encode_weights) {
   return (encode_labels ? kEncodeLabels : 0) |
          (encode_weights ? kEncodeWeights : 0);
 }
 
-bool GetEpsNormalizeType(std::string_view str,
+bool fstscript_EXPORT GetEpsNormalizeType(std::string_view str,
                          EpsNormalizeType *eps_norm_type);
 
-bool GetMapType(std::string_view str, MapType *map_type);
+bool fstscript_EXPORT GetMapType(std::string_view str, MapType *map_type);
 
-bool GetProjectType(std::string_view str, ProjectType *project_type);
+bool fstscript_EXPORT GetProjectType(std::string_view str, ProjectType *project_type);
 
-inline uint8_t GetPushFlags(bool push_weights, bool push_labels,
+inline uint8_t fstscript_EXPORT GetPushFlags(bool push_weights, bool push_labels,
                             bool remove_total_weight,
                             bool remove_common_affix) {
   return ((push_weights ? kPushWeights : 0) | (push_labels ? kPushLabels : 0) |
@@ -73,16 +74,16 @@ inline uint8_t GetPushFlags(bool push_weights, bool push_labels,
           (remove_common_affix ? kPushRemoveCommonAffix : 0));
 }
 
-bool GetQueueType(std::string_view str, QueueType *queue_type);
+bool fstscript_EXPORT GetQueueType(std::string_view str, QueueType *queue_type);
 
-bool GetRandArcSelection(std::string_view str, RandArcSelection *ras);
+bool fstscript_EXPORT GetRandArcSelection(std::string_view str, RandArcSelection *ras);
 
-bool GetReplaceLabelType(std::string_view str, bool epsilon_on_replace,
+bool fstscript_EXPORT GetReplaceLabelType(std::string_view str, bool epsilon_on_replace,
                          ReplaceLabelType *rlt);
 
-bool GetReweightType(std::string_view str, ReweightType *reweight_type);
+bool fstscript_EXPORT GetReweightType(std::string_view str, ReweightType *reweight_type);
 
-bool GetTokenType(std::string_view str, TokenType *token_type);
+bool fstscript_EXPORT GetTokenType(std::string_view str, TokenType *token_type);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/info-impl.h b/src/include/fst/script/info-impl.h
index 7e485c9..c8aa2c5 100644
--- a/src/include/fst/script/info-impl.h
+++ b/src/include/fst/script/info-impl.h
@@ -29,6 +29,7 @@
 #include <fst/connect.h>
 #include <fst/dfs-visit.h>
 #include <fst/fst.h>
+#include <fst/properties.h>
 #include <fst/lookahead-matcher.h>
 #include <fst/matcher.h>
 #include <fst/queue.h>
@@ -37,6 +38,7 @@
 #include <fst/visit.h>
 #include <fst/script/arcfilter-impl.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
@@ -44,6 +46,7 @@ namespace fst {
 // WARNING: Stand-alone use of this class is not recommended, most code
 // should call directly the relevant library functions: Fst<Arc>::NumStates,
 // Fst<Arc>::NumArcs, TestProperties, etc.
+    class  fstscript_EXPORT FstInfo;
 class FstInfo {
  public:
   // When info_type is "short" (or "auto" and not an ExpandedFst) then only
@@ -337,10 +340,10 @@ class FstInfo {
 };
 
 // Prints `properties` to `ostrm` in a user-friendly multi-line format.
-void PrintProperties(std::ostream &ostrm, uint64_t properties);
+void fstscript_EXPORT PrintProperties(std::ostream &ostrm, uint64_t properties);
 
 // Prints `header` to `ostrm` in a user-friendly multi-line format.
-void PrintHeader(std::ostream &ostrm, const FstHeader &header);
+void fstscript_EXPORT PrintHeader(std::ostream &ostrm, const FstHeader &header);
 
 }  // namespace fst
 
diff --git a/src/include/fst/script/info.h b/src/include/fst/script/info.h
index 0ef2e86..8ce9d5b 100644
--- a/src/include/fst/script/info.h
+++ b/src/include/fst/script/info.h
@@ -26,6 +26,9 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/info-impl.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -40,7 +43,7 @@ void Info(FstInfoArgs *args) {
   info.Info();
 }
 
-void Info(const FstClass &fst, bool test_properties, ArcFilterType arc_filter,
+void fstscript_EXPORT Info(const FstClass &fst, bool test_properties, ArcFilterType arc_filter,
           const std::string &info_type, bool verify);
 
 }  // namespace script
diff --git a/src/include/fst/script/intersect.h b/src/include/fst/script/intersect.h
index bc82f43..acb101e 100644
--- a/src/include/fst/script/intersect.h
+++ b/src/include/fst/script/intersect.h
@@ -24,6 +24,9 @@
 #include <fst/script/compose.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -39,7 +42,7 @@ void Intersect(FstIntersectArgs *args) {
   Intersect(ifst1, ifst2, ofst, opts);
 }
 
-void Intersect(const FstClass &ifst, const FstClass &ifst2,
+void fstscript_EXPORT Intersect(const FstClass &ifst, const FstClass &ifst2,
                MutableFstClass *ofst,
                const ComposeOptions &opts = ComposeOptions());
 
diff --git a/src/include/fst/script/invert.h b/src/include/fst/script/invert.h
index 6959362..ec17662 100644
--- a/src/include/fst/script/invert.h
+++ b/src/include/fst/script/invert.h
@@ -21,6 +21,9 @@
 #include <fst/invert.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -29,7 +32,7 @@ void Invert(MutableFstClass *fst) {
   Invert(fst->GetMutableFst<Arc>());
 }
 
-void Invert(MutableFstClass *fst);
+void fstscript_EXPORT Invert(MutableFstClass *fst);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/isomorphic.h b/src/include/fst/script/isomorphic.h
index 601d86d..e9549e4 100644
--- a/src/include/fst/script/isomorphic.h
+++ b/src/include/fst/script/isomorphic.h
@@ -24,6 +24,9 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -39,7 +42,7 @@ void Isomorphic(FstIsomorphicArgs *args) {
   args->retval = Isomorphic(fst1, fst2, std::get<2>(args->args));
 }
 
-bool Isomorphic(const FstClass &fst1, const FstClass &fst2,
+bool fstscript_EXPORT Isomorphic(const FstClass &fst1, const FstClass &fst2,
                 float delta = kDelta);
 
 }  // namespace script
diff --git a/src/include/fst/script/map.h b/src/include/fst/script/map.h
index 6563f5c..810b06e 100644
--- a/src/include/fst/script/map.h
+++ b/src/include/fst/script/map.h
@@ -28,6 +28,9 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/weight-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -49,7 +52,7 @@ std::unique_ptr<Fst<typename M::ToArc>> StateMap(
   return ofst;
 }
 
-enum class MapType : uint8_t {
+enum class fstscript_EXPORT MapType : uint8_t {
   ARC_SUM,
   ARC_UNIQUE,
   IDENTITY,
@@ -160,10 +163,11 @@ void Map(FstMapArgs *args) {
   }
 }
 
-std::unique_ptr<FstClass> Map(const FstClass &ifst, MapType map_type,
+std::unique_ptr<FstClass> fstscript_EXPORT Map(const FstClass &ifst, MapType map_type,
                               float delta, double power,
                               const WeightClass &weight);
 
+
 }  // namespace script
 }  // namespace fst
 
diff --git a/src/include/fst/script/minimize.h b/src/include/fst/script/minimize.h
index 9436f6c..04e6518 100644
--- a/src/include/fst/script/minimize.h
+++ b/src/include/fst/script/minimize.h
@@ -23,6 +23,9 @@
 #include <fst/minimize.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -37,7 +40,7 @@ void Minimize(FstMinimizeArgs *args) {
   Minimize(ofst1, ofst2, std::get<2>(*args), std::get<3>(*args));
 }
 
-void Minimize(MutableFstClass *ofst1, MutableFstClass *ofst2 = nullptr,
+void fstscript_EXPORT Minimize(MutableFstClass *ofst1, MutableFstClass *ofst2 = nullptr,
               float delta = kShortestDelta, bool allow_nondet = false);
 
 }  // namespace script
diff --git a/src/include/fst/script/print-impl.h b/src/include/fst/script/print-impl.h
index 0d128e7..08fd487 100644
--- a/src/include/fst/script/print-impl.h
+++ b/src/include/fst/script/print-impl.h
@@ -27,6 +27,7 @@
 
 #include <fst/fstlib.h>
 #include <fst/util.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
diff --git a/src/include/fst/script/print.h b/src/include/fst/script/print.h
index 2d9b225..53809a9 100644
--- a/src/include/fst/script/print.h
+++ b/src/include/fst/script/print.h
@@ -25,7 +25,9 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/print-impl.h>
 
-DECLARE_string(fst_field_separator);
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 
 namespace fst {
 namespace script {
@@ -33,7 +35,7 @@ namespace script {
 // Note: it is safe to pass these strings as references because this struct is
 // only used to pass them deeper in the call graph. Be sure you understand why
 // this is so before using this struct for anything else!
-struct FstPrintArgs {
+struct fstscript_EXPORT FstPrintArgs {
   const FstClass &fst;
   const SymbolTable *isyms;
   const SymbolTable *osyms;
@@ -55,7 +57,7 @@ void Print(FstPrintArgs *args) {
   fstprinter.Print(args->ostrm, args->dest);
 }
 
-void Print(const FstClass &fst, std::ostream &ostrm, const std::string &dest,
+void fstscript_EXPORT Print(const FstClass &fst, std::ostream &ostrm, const std::string &dest,
            const SymbolTable *isyms = nullptr,
            const SymbolTable *osyms = nullptr,
            const SymbolTable *ssyms = nullptr, bool accept = true,
diff --git a/src/include/fst/script/project.h b/src/include/fst/script/project.h
index ed2891f..d60c1f8 100644
--- a/src/include/fst/script/project.h
+++ b/src/include/fst/script/project.h
@@ -23,6 +23,9 @@
 #include <fst/project.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -34,7 +37,7 @@ void Project(FstProjectArgs *args) {
   Project(fst, std::get<1>(*args));
 }
 
-void Project(MutableFstClass *fst, ProjectType project_type);
+void fstscript_EXPORT Project(MutableFstClass *fst, ProjectType project_type);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/prune.h b/src/include/fst/script/prune.h
index a7852db..9f2e1fa 100644
--- a/src/include/fst/script/prune.h
+++ b/src/include/fst/script/prune.h
@@ -26,6 +26,9 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/weight-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -62,11 +65,11 @@ void Prune(FstPruneArgs2 *args) {
   }
 }
 
-void Prune(const FstClass &ifst, MutableFstClass *ofst,
+void fstscript_EXPORT Prune(const FstClass &ifst, MutableFstClass *ofst,
            const WeightClass &weight_threshold,
            int64_t state_threshold = kNoStateId, float delta = kDelta);
 
-void Prune(MutableFstClass *fst, const WeightClass &weight_threshold,
+void fstscript_EXPORT Prune(MutableFstClass *fst, const WeightClass &weight_threshold,
            int64_t state_threshold = kNoStateId, float delta = kDelta);
 
 }  // namespace script
diff --git a/src/include/fst/script/push.h b/src/include/fst/script/push.h
index 81bcb9b..d4be53e 100644
--- a/src/include/fst/script/push.h
+++ b/src/include/fst/script/push.h
@@ -24,6 +24,9 @@
 #include <fst/push.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
@@ -56,10 +59,10 @@ void Push(FstPushArgs2 *args) {
   }
 }
 
-void Push(MutableFstClass *fst, ReweightType type = REWEIGHT_TO_INITIAL,
+void fstscript_EXPORT Push(MutableFstClass *fst, ReweightType type = REWEIGHT_TO_INITIAL,
           float delta = kShortestDelta, bool remove_total_weight = false);
 
-void Push(const FstClass &ifst, MutableFstClass *ofst, uint8_t flags,
+void fstscript_EXPORT Push(const FstClass &ifst, MutableFstClass *ofst, uint8_t flags,
           ReweightType rew_type, float delta = kShortestDelta);
 
 }  // namespace script
diff --git a/src/include/fst/script/randequivalent.h b/src/include/fst/script/randequivalent.h
index 182755d..8274c14 100644
--- a/src/include/fst/script/randequivalent.h
+++ b/src/include/fst/script/randequivalent.h
@@ -25,6 +25,7 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
 #include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -68,7 +69,7 @@ void RandEquivalent(FstRandEquivalentArgs *args) {
   }
 }
 
-bool RandEquivalent(
+bool fstscript_EXPORT RandEquivalent(
     const FstClass &fst1, const FstClass &fst2, int32_t npath = 1,
     const RandGenOptions<RandArcSelection> &opts =
         RandGenOptions<RandArcSelection>(RandArcSelection::UNIFORM),
diff --git a/src/include/fst/script/randgen.h b/src/include/fst/script/randgen.h
index 196fe5f..be92a4f 100644
--- a/src/include/fst/script/randgen.h
+++ b/src/include/fst/script/randgen.h
@@ -26,6 +26,7 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/script-impl.h>
 
+#include <fst/exports/exports.h>
 namespace fst {
 namespace script {
 
@@ -67,7 +68,7 @@ void RandGen(FstRandGenArgs *args) {
   }
 }
 
-void RandGen(const FstClass &ifst, MutableFstClass *ofst,
+void fstscript_EXPORT RandGen(const FstClass &ifst, MutableFstClass *ofst,
              const RandGenOptions<RandArcSelection> &opts =
                  RandGenOptions<RandArcSelection>(RandArcSelection::UNIFORM),
              uint64_t seed = std::random_device()());
diff --git a/src/include/fst/script/relabel.h b/src/include/fst/script/relabel.h
index bea2efa..49487cb 100644
--- a/src/include/fst/script/relabel.h
+++ b/src/include/fst/script/relabel.h
@@ -28,6 +28,9 @@
 #include <fst/relabel.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -64,13 +67,13 @@ void Relabel(FstRelabelArgs2 *args) {
   Relabel(ofst, typed_ipairs, typed_opairs);
 }
 
-void Relabel(MutableFstClass *ofst, const SymbolTable *old_isymbols,
+void fstscript_EXPORT Relabel(MutableFstClass *ofst, const SymbolTable *old_isymbols,
              const SymbolTable *new_isymbols,
              const std::string &unknown_isymbol, bool attach_new_isymbols,
              const SymbolTable *old_osymbols, const SymbolTable *new_osymbols,
              const std::string &unknown_osymbol, bool attach_new_osymbols);
 
-void Relabel(MutableFstClass *ofst,
+void fstscript_EXPORT Relabel(MutableFstClass *ofst,
              const std::vector<std::pair<int64_t, int64_t>> &ipairs,
              const std::vector<std::pair<int64_t, int64_t>> &opairs);
 
diff --git a/src/include/fst/script/replace.h b/src/include/fst/script/replace.h
index f433b2b..b76284d 100644
--- a/src/include/fst/script/replace.h
+++ b/src/include/fst/script/replace.h
@@ -26,10 +26,13 @@
 #include <fst/replace.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
-struct ReplaceOptions {
+struct fstscript_EXPORT ReplaceOptions {
   const int64_t root;                        // Root rule for expansion.
   const ReplaceLabelType call_label_type;    // How to label call arc.
   const ReplaceLabelType return_label_type;  // How to label return arc.
@@ -76,7 +79,7 @@ void Replace(FstReplaceArgs *args) {
   *ofst = rfst;
 }
 
-void Replace(const std::vector<std::pair<int64_t, const FstClass *>> &pairs,
+void fstscript_EXPORT Replace(const std::vector<std::pair<int64_t, const FstClass *>> &pairs,
              MutableFstClass *ofst, const ReplaceOptions &opts);
 
 }  // namespace script
diff --git a/src/include/fst/script/reverse.h b/src/include/fst/script/reverse.h
index 79d86a2..8e06e30 100644
--- a/src/include/fst/script/reverse.h
+++ b/src/include/fst/script/reverse.h
@@ -23,6 +23,9 @@
 #include <fst/reverse.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -35,7 +38,7 @@ void Reverse(FstReverseArgs *args) {
   Reverse(ifst, ofst, std::get<2>(*args));
 }
 
-void Reverse(const FstClass &ifst, MutableFstClass *ofst,
+void fstscript_EXPORT Reverse(const FstClass &ifst, MutableFstClass *ofst,
              bool require_superinitial = true);
 
 }  // namespace script
diff --git a/src/include/fst/script/reweight.h b/src/include/fst/script/reweight.h
index d474ecc..a25c541 100644
--- a/src/include/fst/script/reweight.h
+++ b/src/include/fst/script/reweight.h
@@ -25,6 +25,7 @@
 #include <fst/script/fst-class.h>
 #include <fst/script/script-impl.h>
 #include <fst/script/weight-class.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
@@ -43,7 +44,7 @@ void Reweight(FstReweightArgs *args) {
   Reweight(fst, typed_potentials, std::get<2>(*args));
 }
 
-void Reweight(MutableFstClass *fst, const std::vector<WeightClass> &potentials,
+void fstscript_EXPORT Reweight(MutableFstClass *fst, const std::vector<WeightClass> &potentials,
               ReweightType reweight_type);
 
 }  // namespace script
diff --git a/src/include/fst/script/rmepsilon.h b/src/include/fst/script/rmepsilon.h
index 5549145..3a463f6 100644
--- a/src/include/fst/script/rmepsilon.h
+++ b/src/include/fst/script/rmepsilon.h
@@ -29,10 +29,13 @@
 #include <fst/script/shortest-distance.h>
 #include <fst/script/weight-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
-struct RmEpsilonOptions : public ShortestDistanceOptions {
+struct fstscript_EXPORT RmEpsilonOptions : public ShortestDistanceOptions {
   const bool connect;
   const WeightClass &weight_threshold;
   const int64_t state_threshold;
@@ -123,7 +126,7 @@ void RmEpsilon(FstRmEpsilonArgs *args) {
   internal::RmEpsilon(fst, opts);
 }
 
-void RmEpsilon(MutableFstClass *fst, const RmEpsilonOptions &opts);
+void fstscript_EXPORT RmEpsilon(MutableFstClass *fst, const RmEpsilonOptions &opts);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/script-impl.h b/src/include/fst/script/script-impl.h
index 972d351..5caf942 100644
--- a/src/include/fst/script/script-impl.h
+++ b/src/include/fst/script/script-impl.h
@@ -104,11 +104,12 @@
 #include <fst/log.h>
 #include <fst/generic-register.h>
 #include <fst/script/fst-class.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
 
-enum class RandArcSelection : uint8_t { UNIFORM, LOG_PROB, FAST_LOG_PROB };
+enum class fstscript_EXPORT RandArcSelection : uint8_t { UNIFORM, LOG_PROB, FAST_LOG_PROB };
 
 // A generic register for operations with various kinds of signatures.
 // Needed since every function signature requires a new registration class.
@@ -132,7 +133,15 @@ class GenericOperationRegister
     // Uses the old-style FST for now.
     std::string legal_type(key.second);  // The arc type.
     ConvertToLegalCSymbol(&legal_type);
-    legal_type.append("-arc.so");
+    legal_type.append("-arc");
+    #ifdef _WIN32
+        legal_type.append(".dll");
+    #elif defined __APPLE__
+        legal_type.append(".dylib");
+    #else
+        legal_type.append(".so");
+
+    #endif // _WIN32
     return legal_type;
   }
 };
diff --git a/src/include/fst/script/shortest-distance.h b/src/include/fst/script/shortest-distance.h
index d113882..0cdb649 100644
--- a/src/include/fst/script/shortest-distance.h
+++ b/src/include/fst/script/shortest-distance.h
@@ -30,11 +30,12 @@
 #include <fst/script/prune.h>
 #include <fst/script/script-impl.h>
 #include <fst/script/weight-class.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
 
-struct ShortestDistanceOptions {
+struct fstscript_EXPORT ShortestDistanceOptions {
   const QueueType queue_type;
   const ArcFilterType arc_filter_type;
   const int64_t source;
@@ -230,14 +231,14 @@ void ShortestDistance(FstShortestDistanceArgs3 *args) {
   args->retval = WeightClass(ShortestDistance(fst, std::get<1>(args->args)));
 }
 
-void ShortestDistance(const FstClass &fst, std::vector<WeightClass> *distance,
+void fstscript_EXPORT ShortestDistance(const FstClass &fst, std::vector<WeightClass> *distance,
                       const ShortestDistanceOptions &opts);
 
-void ShortestDistance(const FstClass &ifst, std::vector<WeightClass> *distance,
+void fstscript_EXPORT ShortestDistance(const FstClass &ifst, std::vector<WeightClass> *distance,
                       bool reverse = false,
                       double delta = fst::kShortestDelta);
 
-WeightClass ShortestDistance(const FstClass &ifst,
+WeightClass fstscript_EXPORT ShortestDistance(const FstClass &ifst,
                              double delta = fst::kShortestDelta);
 
 }  // namespace script
diff --git a/src/include/fst/script/shortest-path.h b/src/include/fst/script/shortest-path.h
index 9747f07..c74862a 100644
--- a/src/include/fst/script/shortest-path.h
+++ b/src/include/fst/script/shortest-path.h
@@ -28,12 +28,15 @@
 #include <fst/script/shortest-distance.h>
 #include <fst/script/weight-class.h>
 
+#include <fst/exports/exports.h>
+#include <fst/script/script-impl.h>
+
 namespace fst {
 namespace script {
 
 // Slightly simplified interface: `has_distance` and `first_path` are disabled.
 
-struct ShortestPathOptions : public ShortestDistanceOptions {
+struct fstscript_EXPORT ShortestPathOptions : public ShortestDistanceOptions {
   const int32_t nshortest;
   const bool unique;
   const WeightClass &weight_threshold;
@@ -134,7 +137,7 @@ void ShortestPath(FstShortestPathArgs *args) {
   internal::ShortestPath(ifst, ofst, opts);
 }
 
-void ShortestPath(const FstClass &ifst, MutableFstClass *ofst,
+void fstscript_EXPORT ShortestPath(const FstClass &ifst, MutableFstClass *ofst,
                   const ShortestPathOptions &opts);
 
 }  // namespace script
diff --git a/src/include/fst/script/stateiterator-class.h b/src/include/fst/script/stateiterator-class.h
index d43ee3a..f5646b3 100644
--- a/src/include/fst/script/stateiterator-class.h
+++ b/src/include/fst/script/stateiterator-class.h
@@ -24,13 +24,16 @@
 #include <fst/fstlib.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 // Scripting API support for StateIterator.
 
 namespace fst {
 namespace script {
 
 // Virtual interface implemented by each concrete StateIteratorImpl<F>.
-class StateIteratorImplBase {
+class fstscript_EXPORT StateIteratorImplBase {
  public:
   virtual bool Done() const = 0;
   virtual int64_t Value() const = 0;
@@ -59,7 +62,7 @@ class StateIteratorClassImpl : public StateIteratorImplBase {
   StateIterator<Fst<Arc>> siter_;
 };
 
-class StateIteratorClass;
+class fstscript_EXPORT StateIteratorClass;
 
 using InitStateIteratorClassArgs =
     std::pair<const FstClass &, StateIteratorClass *>;
diff --git a/src/include/fst/script/synchronize.h b/src/include/fst/script/synchronize.h
index 7f2851f..e9f301c 100644
--- a/src/include/fst/script/synchronize.h
+++ b/src/include/fst/script/synchronize.h
@@ -23,6 +23,9 @@
 #include <fst/synchronize.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -35,7 +38,7 @@ void Synchronize(FstSynchronizeArgs *args) {
   Synchronize(ifst, ofst);
 }
 
-void Synchronize(const FstClass &ifst, MutableFstClass *ofst);
+void fstscript_EXPORT Synchronize(const FstClass &ifst, MutableFstClass *ofst);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/text-io.h b/src/include/fst/script/text-io.h
index a186ad8..1fd4a66 100644
--- a/src/include/fst/script/text-io.h
+++ b/src/include/fst/script/text-io.h
@@ -27,14 +27,15 @@
 
 #include <fst/script/weight-class.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
 
-bool ReadPotentials(std::string_view weight_type, const std::string &source,
+bool fstscript_EXPORT ReadPotentials(std::string_view weight_type, const std::string &source,
                     std::vector<WeightClass> *potentials);
 
-bool WritePotentials(const std::string &source,
+bool fstscript_EXPORT WritePotentials(const std::string &source,
                      const std::vector<WeightClass> &potentials);
 
 }  // namespace script
diff --git a/src/include/fst/script/topsort.h b/src/include/fst/script/topsort.h
index f3164d9..6616d2d 100644
--- a/src/include/fst/script/topsort.h
+++ b/src/include/fst/script/topsort.h
@@ -22,6 +22,9 @@
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -32,7 +35,7 @@ void TopSort(FstTopSortArgs *args) {
   args->retval = TopSort(args->args->GetMutableFst<Arc>());
 }
 
-bool TopSort(MutableFstClass *fst);
+bool fstscript_EXPORT TopSort(MutableFstClass *fst);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/union.h b/src/include/fst/script/union.h
index 8481af1..b7d7da1 100644
--- a/src/include/fst/script/union.h
+++ b/src/include/fst/script/union.h
@@ -24,6 +24,9 @@
 #include <fst/union.h>
 #include <fst/script/fst-class.h>
 
+#include <fst/script/script-impl.h>
+#include <fst/exports/exports.h>
+
 namespace fst {
 namespace script {
 
@@ -51,9 +54,9 @@ void Union(FstUnionArgs2 *args) {
   Union(fst1, typed_fsts2);
 }
 
-void Union(MutableFstClass *fst1, const FstClass &fst2);
+void fstscript_EXPORT Union(MutableFstClass *fst1, const FstClass &fst2);
 
-void Union(MutableFstClass *fst1, const std::vector<const FstClass *> &fsts2);
+void fstscript_EXPORT Union(MutableFstClass *fst1, const std::vector<const FstClass *> &fsts2);
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/verify.h b/src/include/fst/script/verify.h
index c7c683c..480d50b 100644
--- a/src/include/fst/script/verify.h
+++ b/src/include/fst/script/verify.h
@@ -21,6 +21,9 @@
 #include <fst/verify.h>
 #include <fst/script/arg-packs.h>
 #include <fst/script/fst-class.h>
+#include <fst/exports/exports.h>
+
+#include <fst/script/script-impl.h>
 
 namespace fst {
 namespace script {
@@ -33,7 +36,8 @@ void Verify(FstVerifyArgs *args) {
   args->retval = Verify(fst);
 }
 
-bool Verify(const FstClass &fst);
+bool fstscript_EXPORT Verify(const FstClass &fst);
+
 
 }  // namespace script
 }  // namespace fst
diff --git a/src/include/fst/script/weight-class.h b/src/include/fst/script/weight-class.h
index d62bbc3..714ae33 100644
--- a/src/include/fst/script/weight-class.h
+++ b/src/include/fst/script/weight-class.h
@@ -30,10 +30,11 @@
 #include <fst/util.h>
 #include <fst/weight.h>
 #include <string_view>
+#include <fst/exports/exports.h>
 
 namespace fst {
 namespace script {
-
+    class fstscript_EXPORT WeightImplBase;
 class WeightImplBase {
  public:
   virtual WeightImplBase *Copy() const = 0;
@@ -107,6 +108,8 @@ class WeightClassImpl : public WeightImplBase {
   W weight_;
 };
 
+class fstscript_EXPORT WeightClass;
+
 class WeightClass {
  public:
   WeightClass() = default;
@@ -162,15 +165,15 @@ class WeightClass {
   static bool WeightTypesMatch(const WeightClass &lhs, const WeightClass &rhs,
                                std::string_view op_name);
 
-  friend bool operator==(const WeightClass &lhs, const WeightClass &rhs);
+  friend bool fstscript_EXPORT operator==(const WeightClass &lhs, const WeightClass &rhs);
 
-  friend WeightClass Plus(const WeightClass &lhs, const WeightClass &rhs);
+  friend WeightClass fstscript_EXPORT Plus(const WeightClass &lhs, const WeightClass &rhs);
 
-  friend WeightClass Times(const WeightClass &lhs, const WeightClass &rhs);
+  friend WeightClass fstscript_EXPORT Times(const WeightClass &lhs, const WeightClass &rhs);
 
-  friend WeightClass Divide(const WeightClass &lhs, const WeightClass &rhs);
+  friend WeightClass fstscript_EXPORT Divide(const WeightClass &lhs, const WeightClass &rhs);
 
-  friend WeightClass Power(const WeightClass &w, size_t n);
+  friend WeightClass fstscript_EXPORT Power(const WeightClass &w, size_t n);
 
  private:
   const WeightImplBase *GetImpl() const { return impl_.get(); }
@@ -179,22 +182,22 @@ class WeightClass {
 
   std::unique_ptr<WeightImplBase> impl_;
 
-  friend std::ostream &operator<<(std::ostream &o, const WeightClass &c);
+  friend std::ostream fstscript_EXPORT &operator<<(std::ostream &o, const WeightClass &c);
 };
 
-bool operator==(const WeightClass &lhs, const WeightClass &rhs);
+bool fstscript_EXPORT operator==(const WeightClass &lhs, const WeightClass &rhs);
 
-bool operator!=(const WeightClass &lhs, const WeightClass &rhs);
+bool fstscript_EXPORT operator!=(const WeightClass &lhs, const WeightClass &rhs);
 
-WeightClass Plus(const WeightClass &lhs, const WeightClass &rhs);
+WeightClass fstscript_EXPORT Plus(const WeightClass &lhs, const WeightClass &rhs);
 
-WeightClass Times(const WeightClass &lhs, const WeightClass &rhs);
+WeightClass fstscript_EXPORT Times(const WeightClass &lhs, const WeightClass &rhs);
 
-WeightClass Divide(const WeightClass &lhs, const WeightClass &rhs);
+WeightClass fstscript_EXPORT Divide(const WeightClass &lhs, const WeightClass &rhs);
 
-WeightClass Power(const WeightClass &w, size_t n);
+WeightClass fstscript_EXPORT Power(const WeightClass &w, size_t n);
 
-std::ostream &operator<<(std::ostream &o, const WeightClass &c);
+std::ostream fstscript_EXPORT &operator<<(std::ostream &o, const WeightClass &c);
 
 // Registration for generic weight types.
 
@@ -220,7 +223,14 @@ class WeightClassRegister
   std::string ConvertKeyToSoFilename(std::string_view key) const final {
     std::string legal_type(key);
     ConvertToLegalCSymbol(&legal_type);
-    legal_type.append(".so");
+    #ifdef _WIN32
+        legal_type.append(".dll");
+    #elif defined __APPLE__
+        legal_type.append(".dylib");
+    #else
+        legal_type.append(".so");
+
+    #endif // _WIN32
     return legal_type;
   }
 };
@@ -241,6 +251,7 @@ using WeightClassRegisterer = GenericRegisterer<WeightClassRegister>;
 #define REGISTER_FST_WEIGHT(Weight) \
   REGISTER_FST_WEIGHT_EXPANDER(Weight, __LINE__)
 
+
 }  // namespace script
 }  // namespace fst
 
diff --git a/src/include/fst/string.h b/src/include/fst/string.h
index 43dc994..9a296f5 100644
--- a/src/include/fst/string.h
+++ b/src/include/fst/string.h
@@ -36,11 +36,12 @@
 #include <fst/properties.h>
 #include <fst/symbol-table.h>
 #include <fst/util.h>
+#include <fst/exports/exports.h>
 
 #include <fst/compat.h>
 #include <string_view>
 
-DECLARE_string(fst_field_separator);
+DECLARE_export_string(fst_field_separator, fst_EXPORT);
 
 namespace fst {
 
diff --git a/src/include/fst/symbol-table-ops.h b/src/include/fst/symbol-table-ops.h
index c317cc6..c1079fa 100644
--- a/src/include/fst/symbol-table-ops.h
+++ b/src/include/fst/symbol-table-ops.h
@@ -25,6 +25,7 @@
 
 #include <fst/fst.h>
 #include <fst/symbol-table.h>
+#include <fst/exports/exports.h>
 
 #include <unordered_set>
 
@@ -54,7 +55,7 @@ SymbolTable *PruneSymbolTable(const Fst<Arc> &fst, const SymbolTable &syms,
 }
 
 // Relabels a symbol table to make it a contiguous mapping.
-SymbolTable *CompactSymbolTable(const SymbolTable &syms);
+SymbolTable fst_EXPORT *CompactSymbolTable(const SymbolTable &syms);
 
 // Merges two SymbolTables, all symbols from left will be merged into right
 // with the same IDs. Symbols in right that have conflicting IDs with those
@@ -73,18 +74,18 @@ SymbolTable *CompactSymbolTable(const SymbolTable &syms);
 //                                     b.InputSymbols(), &relabel);
 //   if (relabel) Relabel(b, bnew.get(), nullptr);
 //   b.SetInputSymbols(bnew);
-SymbolTable *MergeSymbolTable(const SymbolTable &left, const SymbolTable &right,
+SymbolTable fst_EXPORT *MergeSymbolTable(const SymbolTable &left, const SymbolTable &right,
                               bool *right_relabel_output = nullptr);
 
 // Read the symbol table from any Fst::Read()able file, without loading the
 // corresponding FST. Returns nullptr if the FST does not contain a symbol
 // table or the symbol table cannot be read.
-SymbolTable *FstReadSymbols(const std::string &source, bool input);
+SymbolTable fst_EXPORT *FstReadSymbols(const std::string &source, bool input);
 
 // Adds a contiguous range of symbols to a symbol table using a simple prefix
 // for the string, returning false if the inserted symbol string clashes with
 // any currently present.
-bool AddAuxiliarySymbols(const std::string &prefix, int64_t start_label,
+bool fst_EXPORT AddAuxiliarySymbols(const std::string &prefix, int64_t start_label,
                          int64_t nlabels, SymbolTable *syms);
 
 }  // namespace fst
diff --git a/src/include/fst/symbol-table.h b/src/include/fst/symbol-table.h
index 77728b5..43ea94a 100644
--- a/src/include/fst/symbol-table.h
+++ b/src/include/fst/symbol-table.h
@@ -33,6 +33,7 @@
 #include <vector>
 
 #include <fst/compat.h>
+#include <fst/exports/exports.h>
 #include <fst/flags.h>
 #include <fst/log.h>
 #include <fstream>
@@ -42,15 +43,16 @@
 #include <string_view>
 #include <fst/lock.h>
 
-DECLARE_bool(fst_compat_symbols);
+
+DECLARE_export_bool(fst_compat_symbols, fst_EXPORT);
 
 namespace fst {
 
 inline constexpr int64_t kNoSymbol = -1;
 
-class SymbolTable;
+class fst_EXPORT SymbolTable;
 
-struct SymbolTableTextOptions {
+struct fst_EXPORT SymbolTableTextOptions {
   explicit SymbolTableTextOptions(bool allow_negative_labels = false);
 
   bool allow_negative_labels;
@@ -573,14 +575,14 @@ SymbolTable *RelabelSymbolTable(
 
 // Returns true if the two symbol tables have equal checksums. Passing in
 // nullptr for either table always returns true.
-bool CompatSymbols(const SymbolTable *syms1, const SymbolTable *syms2,
+bool fst_EXPORT CompatSymbols(const SymbolTable *syms1, const SymbolTable *syms2,
                    bool warning = true);
 
 // Symbol table serialization.
 
-void SymbolTableToString(const SymbolTable *table, std::string *result);
+void fst_EXPORT SymbolTableToString(const SymbolTable *table, std::string *result);
 
-SymbolTable *StringToSymbolTable(const std::string &str);
+SymbolTable fst_EXPORT *StringToSymbolTable(const std::string &str);
 
 }  // namespace fst
 
diff --git a/src/include/fst/test-properties.h b/src/include/fst/test-properties.h
index 85f0941..a6fbf8c 100644
--- a/src/include/fst/test-properties.h
+++ b/src/include/fst/test-properties.h
@@ -26,10 +26,11 @@
 
 #include <fst/connect.h>
 #include <fst/dfs-visit.h>
+#include <fst/exports/exports.h>
 
 #include <unordered_set>
 
-DECLARE_bool(fst_verify_properties);
+DECLARE_export_bool(fst_verify_properties, fst_EXPORT);
 
 namespace fst {
 namespace internal {
diff --git a/src/include/fst/test/fst_test.h b/src/include/fst/test/fst_test.h
index 467faa4..66a6e7e 100644
--- a/src/include/fst/test/fst_test.h
+++ b/src/include/fst/test/fst_test.h
@@ -22,6 +22,7 @@
 
 #include <memory>
 #include <string>
+#include <fst/exports/exports.h>
 
 #include <fst/equal.h>
 #include <fstream>
@@ -29,8 +30,6 @@
 #include <fst/vector-fst.h>
 #include <fst/verify.h>
 
-DECLARE_string(tmpdir);
-
 namespace fst {
 
 // This tests an Fst F that is assumed to have a copy method from an
@@ -236,13 +235,14 @@ class FstTester {
     {
       // check mmaping by first writing the file with the aligned attribute set
       {
-        std::ofstream ostr(aligned);
+
+        std::ofstream ostr(aligned, std::ios_base::binary);
         FstWriteOptions opts;
         opts.source = aligned;
         opts.align = true;
         CHECK(fst.Write(ostr, opts));
       }
-      std::ifstream istr(aligned);
+      std::ifstream istr(aligned, std::ios_base::binary);
       FstReadOptions opts;
       opts.mode = FstReadOptions::ReadMode("map");
       opts.source = aligned;
@@ -254,13 +254,13 @@ class FstTester {
     // check mmaping of unaligned files to make sure it does not fail.
     {
       {
-        std::ofstream ostr(aligned);
+        std::ofstream ostr(aligned, std::ios_base::binary);
         FstWriteOptions opts;
         opts.source = aligned;
         opts.align = false;
         CHECK(fst.Write(ostr, opts));
       }
-      std::ifstream istr(aligned);
+      std::ifstream istr(aligned, std::ios_base::binary);
       FstReadOptions opts;
       opts.mode = FstReadOptions::ReadMode("map");
       opts.source = aligned;
diff --git a/src/include/fst/util.h b/src/include/fst/util.h
index df539fd..1d5a1d6 100644
--- a/src/include/fst/util.h
+++ b/src/include/fst/util.h
@@ -39,6 +39,7 @@
 #include <fst/log.h>
 #include <fstream>
 #include <fst/mapped-file.h>
+#include <fst/exports/exports.h>
 
 #include <fst/flags.h>
 #include <unordered_map>
@@ -48,7 +49,7 @@
 
 // Utility for error handling.
 
-DECLARE_bool(fst_error_fatal);
+DECLARE_export_bool(fst_error_fatal, fst_EXPORT);
 
 #define FSTERROR()                                                     \
   LOG(LEVEL(FST_FLAGS_fst_error_fatal ? base_logging::FATAL \
@@ -314,9 +315,9 @@ std::ostream &WriteType(std::ostream &strm, const std::unordered_set<T...> &c) {
 // string should consist only of digits (no prefixes such as "0x") and an
 // optionally preceding minus. Returns a value iff the entirety of the string is
 // consumed during integer parsing, otherwise returns `std::nullopt`.
-std::optional<int64_t> ParseInt64(std::string_view s, int base = 10);
+std::optional<int64_t> fst_EXPORT ParseInt64(std::string_view s, int base = 10);
 
-int64_t StrToInt64(std::string_view s, std::string_view source, size_t nline,
+int64_t fst_EXPORT StrToInt64(std::string_view s, std::string_view source, size_t nline,
                    bool allow_negative, bool *error = nullptr);
 
 template <typename Weight>
@@ -345,7 +346,7 @@ template <typename I>
 bool ReadIntPairs(const std::string &source,
                   std::vector<std::pair<I, I>> *pairs,
                   bool allow_negative = false) {
-  std::ifstream strm(source, std::ios_base::in);
+  std::ifstream strm(source, std::ios_base::in | std::ios_base::binary);
   if (!strm) {
     LOG(ERROR) << "ReadIntPairs: Can't open file: " << source;
     return false;
@@ -380,7 +381,7 @@ bool WriteIntPairs(const std::string &source,
                    const std::vector<std::pair<I, I>> &pairs) {
   std::ofstream fstrm;
   if (!source.empty()) {
-    fstrm.open(source);
+    fstrm.open(source, std::ios_base::out | std::ios_base::binary);
     if (!fstrm) {
       LOG(ERROR) << "WriteIntPairs: Can't open file: " << source;
       return false;
@@ -410,12 +411,12 @@ bool WriteLabelPairs(const std::string &source,
 
 // Utilities for converting a type name to a legal C symbol.
 
-void ConvertToLegalCSymbol(std::string *s);
+void fst_EXPORT ConvertToLegalCSymbol(std::string *s);
 
 // Utilities for stream I/O.
 
-bool AlignInput(std::istream &strm, size_t align = MappedFile::kArchAlignment);
-bool AlignOutput(std::ostream &strm, size_t align = MappedFile::kArchAlignment);
+bool fst_EXPORT AlignInput(std::istream &strm, size_t align = MappedFile::kArchAlignment);
+bool fst_EXPORT AlignOutput(std::ostream &strm, size_t align = MappedFile::kArchAlignment);
 
 // An associative container for which testing membership is faster than an STL
 // set if members are restricted to an interval that excludes most non-members.
diff --git a/src/include/fst/vector-fst.h b/src/include/fst/vector-fst.h
index 1be840f..e758bc3 100644
--- a/src/include/fst/vector-fst.h
+++ b/src/include/fst/vector-fst.h
@@ -33,6 +33,7 @@
 #include <fst/fst-decl.h>  // For optional argument declarations
 #include <fst/mutable-fst.h>
 #include <fst/test-properties.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
@@ -484,7 +485,7 @@ VectorFstImpl<S> *VectorFstImpl<S>::Read(std::istream &strm,
     int64_t narcs;
     ReadType(strm, &narcs);
     if (!strm) {
-      LOG(ERROR) << "VectorFst::Read: Read failed: " << opts.source;
+      LOG(ERROR) << "VectorFst::Read: State read failed: " << opts.source;
       return nullptr;
     }
     impl->ReserveArcs(state, narcs);
@@ -495,7 +496,7 @@ VectorFstImpl<S> *VectorFstImpl<S>::Read(std::istream &strm,
       arc.weight.Read(strm);
       ReadType(strm, &arc.nextstate);
       if (!strm) {
-        LOG(ERROR) << "VectorFst::Read: Read failed: " << opts.source;
+        LOG(ERROR) << "VectorFst::Read: Arc read failed: " << opts.source;
         return nullptr;
       }
       impl->BaseImpl::AddArc(state, std::move(arc));
@@ -817,6 +818,7 @@ inline void VectorFst<Arc, State>::InitMutableArcIterator(
 // A useful alias when using StdArc.
 using StdVectorFst = VectorFst<StdArc>;
 
+
 }  // namespace fst
 
 #endif  // FST_VECTOR_FST_H_
diff --git a/src/include/fst/weight.h b/src/include/fst/weight.h
index a56868c..c399e80 100644
--- a/src/include/fst/weight.h
+++ b/src/include/fst/weight.h
@@ -32,10 +32,11 @@
 #include <fst/log.h>
 
 #include <fst/util.h>
+#include <fst/exports/exports.h>
 
 
-DECLARE_string(fst_weight_parentheses);
-DECLARE_string(fst_weight_separator);
+DECLARE_export_string(fst_weight_parentheses, fst_EXPORT);
+DECLARE_export_string(fst_weight_separator, fst_EXPORT);
 
 namespace fst {
 
@@ -269,7 +270,7 @@ struct WeightGenerate {
 };
 
 namespace internal {
-
+    class fst_EXPORT CompositeWeightIO;
 class CompositeWeightIO {
  public:
   CompositeWeightIO();
@@ -292,7 +293,7 @@ class CompositeWeightIO {
 };
 
 }  // namespace internal
-
+class fst_EXPORT CompositeWeightWriter;
 // Helper class for writing textual composite weights.
 class CompositeWeightWriter : public internal::CompositeWeightIO {
  public:
@@ -330,6 +331,7 @@ class CompositeWeightWriter : public internal::CompositeWeightIO {
 // a separator character. There must be at least one element per textual
 // representation. Parentheses characters should be set if the composite
 // weights themselves contain composite weights to ensure proper parsing.
+class fst_EXPORT CompositeWeightReader;
 class CompositeWeightReader : public internal::CompositeWeightIO {
  public:
   // Uses configuration from flags (FST_FLAGS_fst_weight_separator,
diff --git a/src/lib/CMakeLists.txt b/src/lib/CMakeLists.txt
new file mode 100644
index 0000000..5194802
--- /dev/null
+++ b/src/lib/CMakeLists.txt
@@ -0,0 +1,41 @@
+
+
+add_library(fst
+  SHARED
+  compat.cc
+  encode.cc
+  flags.cc
+  fst-types.cc
+  fst.cc
+  mapped-file.cc
+  properties.cc
+  symbol-table.cc
+  symbol-table-ops.cc
+  util.cc
+  weight.cc
+)
+if (MSVC)
+GENERATE_EXPORT_HEADER( fst
+             BASE_NAME fst
+             EXPORT_MACRO_NAME fst_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fst_Export.h
+             STATIC_DEFINE fst_BUILT_AS_STATIC
+)
+endif()
+set_target_properties(fst PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+target_include_directories(fst PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+target_include_directories(fst PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+target_link_libraries(fst ${CMAKE_DL_LIBS})
+target_compile_definitions(fst PRIVATE fst_EXPORTS)
+
+
+
+install(TARGETS fst
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+  )
\ No newline at end of file
diff --git a/src/lib/flags.cc b/src/lib/flags.cc
index 054f425..d7d9f8d 100644
--- a/src/lib/flags.cc
+++ b/src/lib/flags.cc
@@ -27,13 +27,19 @@
 
 #include <fst/log.h>
 
-static const char *private_tmpdir = getenv("TMPDIR");
+#include <fst/exports/exports.h>
+
+FlagSingleton& GetFlagSingleton() {
+    static FlagSingleton _instance;
+    return _instance;
+};
+static const char* private_tmpdir = getenv("TMPDIR");
 
 DEFINE_int32(v, 0, "verbosity level");
 DEFINE_bool(help, false, "show usage information");
 DEFINE_bool(helpshort, false, "show brief usage information");
 DEFINE_string(tmpdir, private_tmpdir ? private_tmpdir : "/tmp",
-              "temporary directory");
+            "temporary directory");
 
 static std::string flag_usage;
 static std::string prog_src;
diff --git a/src/lib/fst-types.cc b/src/lib/fst-types.cc
index d39042d..333aad0 100644
--- a/src/lib/fst-types.cc
+++ b/src/lib/fst-types.cc
@@ -18,44 +18,52 @@
 // Registration of common FST and arc types.
 
 #include <fst/arc.h>
-#include <fst/compact-fst.h>
-#include <fst/const-fst.h>
-#include <fst/edit-fst.h>
 #include <fst/register.h>
+#include <fst/generic-register.h>
 #include <fst/vector-fst.h>
+#include <fst/const-fst.h>
+#include <fst/compact-fst.h>
+#include <fst/edit-fst.h>
+#include <fst/fst.h>
+#include <fst/exports/exports.h>
 
 namespace fst {
 
-REGISTER_FST(VectorFst, StdArc);
-REGISTER_FST(VectorFst, LogArc);
-REGISTER_FST(VectorFst, Log64Arc);
+	Singleton& GetSingleton() {
+		static Singleton _instance;
+		return _instance;
+	};
+
+	REGISTER_FST(VectorFst, StdArc);
+	REGISTER_FST(VectorFst, LogArc);
+	REGISTER_FST(VectorFst, Log64Arc);
 
-REGISTER_FST(ConstFst, StdArc);
-REGISTER_FST(ConstFst, LogArc);
-REGISTER_FST(ConstFst, Log64Arc);
+	REGISTER_FST(ConstFst, StdArc);
+	REGISTER_FST(ConstFst, LogArc);
+	REGISTER_FST(ConstFst, Log64Arc);
 
-REGISTER_FST(EditFst, StdArc);
-REGISTER_FST(EditFst, LogArc);
-REGISTER_FST(EditFst, Log64Arc);
+	REGISTER_FST(EditFst, StdArc);
+	REGISTER_FST(EditFst, LogArc);
+	REGISTER_FST(EditFst, Log64Arc);
 
-REGISTER_FST(CompactStringFst, StdArc);
-REGISTER_FST(CompactStringFst, LogArc);
-REGISTER_FST(CompactStringFst, Log64Arc);
+	REGISTER_FST(CompactStringFst, StdArc);
+	REGISTER_FST(CompactStringFst, LogArc);
+	REGISTER_FST(CompactStringFst, Log64Arc);
 
-REGISTER_FST(CompactWeightedStringFst, StdArc);
-REGISTER_FST(CompactWeightedStringFst, LogArc);
-REGISTER_FST(CompactWeightedStringFst, Log64Arc);
+	REGISTER_FST(CompactWeightedStringFst, StdArc);
+	REGISTER_FST(CompactWeightedStringFst, LogArc);
+	REGISTER_FST(CompactWeightedStringFst, Log64Arc);
 
-REGISTER_FST(CompactAcceptorFst, StdArc);
-REGISTER_FST(CompactAcceptorFst, LogArc);
-REGISTER_FST(CompactAcceptorFst, Log64Arc);
+	REGISTER_FST(CompactAcceptorFst, StdArc);
+	REGISTER_FST(CompactAcceptorFst, LogArc);
+	REGISTER_FST(CompactAcceptorFst, Log64Arc);
 
-REGISTER_FST(CompactUnweightedFst, StdArc);
-REGISTER_FST(CompactUnweightedFst, LogArc);
-REGISTER_FST(CompactUnweightedFst, Log64Arc);
+	REGISTER_FST(CompactUnweightedFst, StdArc);
+	REGISTER_FST(CompactUnweightedFst, LogArc);
+	REGISTER_FST(CompactUnweightedFst, Log64Arc);
 
-REGISTER_FST(CompactUnweightedAcceptorFst, StdArc);
-REGISTER_FST(CompactUnweightedAcceptorFst, LogArc);
-REGISTER_FST(CompactUnweightedAcceptorFst, Log64Arc);
+	REGISTER_FST(CompactUnweightedAcceptorFst, StdArc);
+	REGISTER_FST(CompactUnweightedAcceptorFst, LogArc);
+	REGISTER_FST(CompactUnweightedAcceptorFst, Log64Arc);
 
 }  // namespace fst
diff --git a/src/lib/fst.cc b/src/lib/fst.cc
index 9c5f165..5600be5 100644
--- a/src/lib/fst.cc
+++ b/src/lib/fst.cc
@@ -18,22 +18,24 @@
 // FST definitions.
 
 #include <fst/fst.h>
+#include <fst/cache.h>
+#include <fst/lookahead-matcher.h>
 
 #include <cstdint>
 #include <sstream>
 
 #include <fst/flags.h>
 #include <fst/log.h>
+#include <fst/exports/exports.h>
 
 // FST flag definitions.
-
 DEFINE_bool(fst_verify_properties, false,
             "Verify FST properties queried by TestProperties");
 
 DEFINE_bool(fst_default_cache_gc, true, "Enable garbage collection of cache");
 
 DEFINE_int64(fst_default_cache_gc_limit, 1 << 20LL,
-             "Cache byte size that triggers garbage collection");
+            "Cache byte size that triggers garbage collection");
 
 DEFINE_bool(fst_align, false, "Write FST data aligned where appropriate");
 
@@ -41,7 +43,8 @@ DEFINE_string(save_relabel_ipairs, "", "Save input relabel pairs to file");
 DEFINE_string(save_relabel_opairs, "", "Save output relabel pairs to file");
 
 DEFINE_string(fst_read_mode, "read",
-              "Default file reading mode for mappable files");
+            "Default file reading mode for mappable files");
+
 
 namespace fst {
 
diff --git a/src/lib/mapped-file.cc b/src/lib/mapped-file.cc
index f855422..8186ae8 100644
--- a/src/lib/mapped-file.cc
+++ b/src/lib/mapped-file.cc
@@ -86,7 +86,12 @@ MappedFile *MappedFile::Map(std::istream &istrm, bool memorymap,
 #endif
     if (fd != -1) {
       std::unique_ptr<MappedFile> mmf(MapFromFileDescriptor(fd, pos, size));
+      
+#ifdef _WIN32
+      if (_close(fd) == 0 && mmf != nullptr) {
+#else
       if (close(fd) == 0 && mmf != nullptr) {
+#endif
         istrm.seekg(pos + size, std::ios::beg);
         if (istrm) {
           VLOG(2) << "mmap'ed region of " << size << " at offset " << pos
diff --git a/src/lib/symbol-table.cc b/src/lib/symbol-table.cc
index 10ad9b8..9ecdbbf 100644
--- a/src/lib/symbol-table.cc
+++ b/src/lib/symbol-table.cc
@@ -28,6 +28,8 @@
 #include <fst/util.h>
 #include <string_view>
 #include <fst/lock.h>
+#include <fst/string.h>
+#include <fst/exports/exports.h>
 
 DEFINE_bool(fst_compat_symbols, true,
             "Require symbol tables to match when appropriate");
@@ -340,7 +342,7 @@ void SymbolTableImpl::ShrinkToFit() { symbols_.ShrinkToFit(); }
 
 SymbolTable *SymbolTable::ReadText(const std::string &source,
                                    const SymbolTableTextOptions &opts) {
-  std::ifstream strm(source, std::ios_base::in);
+  std::ifstream strm(source, std::ios_base::in | std::ios_base::binary);
   if (!strm.good()) {
     LOG(ERROR) << "SymbolTable::ReadText: Can't open file: " << source;
     return nullptr;
@@ -388,7 +390,7 @@ bool SymbolTable::WriteText(std::ostream &strm,
 
 bool SymbolTable::WriteText(const std::string &source) const {
   if (!source.empty()) {
-    std::ofstream strm(source);
+    std::ofstream strm(source, std::ios_base::out | std::ios_base::binary);
     if (!strm) {
       LOG(ERROR) << "SymbolTable::WriteText: Can't open file: " << source;
       return false;
diff --git a/src/lib/util.cc b/src/lib/util.cc
index f489d9a..8941cd8 100644
--- a/src/lib/util.cc
+++ b/src/lib/util.cc
@@ -28,6 +28,7 @@
 #include <fst/flags.h>
 #include <fst/log.h>
 #include <fst/mapped-file.h>
+#include <fst/exports/exports.h>
 #include <string_view>
 #include <optional>
 
diff --git a/src/lib/weight.cc b/src/lib/weight.cc
index 80ff90c..d97f24d 100644
--- a/src/lib/weight.cc
+++ b/src/lib/weight.cc
@@ -13,16 +13,17 @@
 // limitations under the License.
 //
 #include <fst/weight.h>
+#include <fst/exports/exports.h>
 
 DEFINE_string(fst_weight_separator, ",",
-              "Character separator between printed composite weights; "
-              "must be a single character");
+            "Character separator between printed composite weights; "
+            "must be a single character");
 
 DEFINE_string(fst_weight_parentheses, "",
-              "Characters enclosing the first weight of a printed composite "
-              "weight (e.g., pair weight, tuple weight and derived classes) to "
-              "ensure proper I/O of nested composite weights; "
-              "must have size 0 (none) or 2 (open and close parenthesis)");
+            "Characters enclosing the first weight of a printed composite "
+            "weight (e.g., pair weight, tuple weight and derived classes) to "
+            "ensure proper I/O of nested composite weights; "
+            "must have size 0 (none) or 2 (open and close parenthesis)");
 
 namespace fst {
 
diff --git a/src/script/CMakeLists.txt b/src/script/CMakeLists.txt
new file mode 100644
index 0000000..0aec3b9
--- /dev/null
+++ b/src/script/CMakeLists.txt
@@ -0,0 +1,75 @@
+
+    add_library(fstscript
+      arciterator-class.cc
+      stateiterator-class.cc
+      weight-class.cc
+      draw.cc
+      getters.cc
+      print.cc
+      text-io.cc
+      arcsort.cc
+      closure.cc
+      fst-class.cc
+      info.cc
+      info-impl.cc
+      verify.cc
+      map.cc
+      compile.cc
+      compose.cc
+      concat.cc
+      connect.cc
+      convert.cc
+      randequivalent.cc
+      randgen.cc
+      topsort.cc
+      union.cc
+      equal.cc
+      equivalent.cc
+      intersect.cc
+      invert.cc
+      encode.cc
+      decode.cc
+      encodemapper-class.cc
+      determinize.cc
+      difference.cc
+      disambiguate.cc
+      epsnormalize.cc
+      isomorphic.cc
+      minimize.cc
+      project.cc
+      prune.cc
+      push.cc
+      relabel.cc
+      replace.cc
+      reverse.cc
+      reweight.cc
+      rmepsilon.cc
+      shortest-distance.cc
+      shortest-path.cc
+      synchronize.cc
+    )
+
+if (MSVC) # Fix for too many exported symbols in fstscript
+  
+GENERATE_EXPORT_HEADER( fstscript
+             BASE_NAME fstscript
+             EXPORT_MACRO_NAME fstscript_EXPORT
+             EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/fst/exports/fstscript_Export.h
+             STATIC_DEFINE fstscript_BUILT_AS_STATIC
+)
+target_include_directories(fstscript PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+target_compile_definitions(fstscript PRIVATE fstscript_EXPORTS)
+    else()
+
+endif()
+    target_link_libraries(fstscript PUBLIC fst)
+target_include_directories(fstscript PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                           $<INSTALL_INTERFACE:include>)
+set_target_properties(fstscript PROPERTIES
+  SOVERSION "${SOVERSION}"
+)
+install(TARGETS fstscript
+  LIBRARY DESTINATION lib
+  ARCHIVE DESTINATION lib
+  RUNTIME DESTINATION bin)
\ No newline at end of file
diff --git a/src/script/encodemapper-class.cc b/src/script/encodemapper-class.cc
index 20dc439..d813bf6 100644
--- a/src/script/encodemapper-class.cc
+++ b/src/script/encodemapper-class.cc
@@ -20,6 +20,11 @@
 #include <cstdint>
 #include <memory>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 #include <fst/script/script-impl.h>
 #include <string_view>
@@ -28,6 +33,7 @@ namespace fst {
 namespace script {
 namespace {
 
+
 // Helper methods.
 
 std::unique_ptr<EncodeMapperClass> ReadEncodeMapper(std::istream &istrm,
@@ -80,6 +86,9 @@ std::unique_ptr<EncodeMapperClass> EncodeMapperClass::Read(
     std::ifstream strm(source, std::ios_base::in | std::ios_base::binary);
     return ReadEncodeMapper(strm, source);
   } else {
+    #ifdef _WIN32
+      _setmode(_fileno(stdin), _O_BINARY);
+    #endif
     return ReadEncodeMapper(std::cin, "standard input");
   }
 }
diff --git a/src/script/fst-class.cc b/src/script/fst-class.cc
index 8490c8e..98a06cd 100644
--- a/src/script/fst-class.cc
+++ b/src/script/fst-class.cc
@@ -31,6 +31,11 @@
 #include <fst/reverse.h>
 #include <fst/union.h>
 #include <string_view>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 namespace fst {
 namespace script {
@@ -89,6 +94,9 @@ std::unique_ptr<FstClass> FstClass::Read(const std::string &source) {
     std::ifstream istrm(source, std::ios_base::in | std::ios_base::binary);
     return ReadFstClass<FstClass>(istrm, source);
   } else {
+    #ifdef _WIN32
+      _setmode(_fileno(stdin), _O_BINARY);
+    #endif
     return ReadFstClass<FstClass>(std::cin, "standard input");
   }
 }
@@ -117,6 +125,9 @@ std::unique_ptr<MutableFstClass> MutableFstClass::Read(
       std::ifstream in(source, std::ios_base::in | std::ios_base::binary);
       return ReadFstClass<MutableFstClass>(in, source);
     } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
       return ReadFstClass<MutableFstClass>(std::cin, "standard input");
     }
   } else {  // Converts to VectorFstClass if not mutable.
@@ -138,6 +149,9 @@ std::unique_ptr<VectorFstClass> VectorFstClass::Read(
     std::ifstream in(source, std::ios_base::in | std::ios_base::binary);
     return ReadFstClass<VectorFstClass>(in, source);
   } else {
+        #ifdef _WIN32
+          _setmode(_fileno(stdin), _O_BINARY);
+        #endif
     return ReadFstClass<VectorFstClass>(std::cin, "standard input");
   }
 }
diff --git a/src/script/text-io.cc b/src/script/text-io.cc
index 658a00d..1c758da 100644
--- a/src/script/text-io.cc
+++ b/src/script/text-io.cc
@@ -28,6 +28,11 @@
 #include <fst/util.h>
 #include <fst/windows_defs.inc>
 #include <string_view>
+#ifdef _WIN32
+#include <io.h>
+#endif
+#include <fcntl.h>
+#include <iostream>
 
 namespace fst {
 namespace script {
@@ -35,7 +40,7 @@ namespace script {
 // Reads vector of weights; returns true on success.
 bool ReadPotentials(std::string_view weight_type, const std::string &source,
                     std::vector<WeightClass> *potentials) {
-  std::ifstream istrm(source);
+  std::ifstream istrm(source, std::ios_base::in | std::ios_base::binary);
   if (!istrm) {
     LOG(ERROR) << "ReadPotentials: Can't open file: " << source;
     return false;
@@ -69,12 +74,17 @@ bool WritePotentials(const std::string &source,
                      const std::vector<WeightClass> &potentials) {
   std::ofstream ostrm;
   if (!source.empty()) {
-    ostrm.open(source);
+    ostrm.open(source, std::ios_base::out | std::ios_base::binary);
     if (!ostrm) {
       LOG(ERROR) << "WritePotentials: Can't open file: " << source;
       return false;
     }
   }
+  #ifdef _WIN32
+  if (!ostrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &strm = ostrm.is_open() ? ostrm : std::cout;
   strm.precision(9);
   for (size_t s = 0; s < potentials.size(); ++s) {
diff --git a/src/script/weight-class.cc b/src/script/weight-class.cc
index b008ca4..e8d67ea 100644
--- a/src/script/weight-class.cc
+++ b/src/script/weight-class.cc
@@ -16,10 +16,14 @@
 // finite-state transducer library.
 
 #include <fst/script/weight-class.h>
+#include <fst/generic-register.h>
 
 #include <string_view>
 
 namespace fst {
+
+
+
 namespace script {
 
 REGISTER_FST_WEIGHT(StdArc::Weight);
diff --git a/src/test/CMakeLists.txt b/src/test/CMakeLists.txt
new file mode 100644
index 0000000..eba0144
--- /dev/null
+++ b/src/test/CMakeLists.txt
@@ -0,0 +1,183 @@
+
+add_executable(fst_test
+        fst_test.cc
+        ../include/fst/test/fst_test.h
+        )
+target_link_libraries(fst_test fst)
+if (MSVC)
+        set_target_properties(fst_test 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "TMPDIR=${CMAKE_BINARY_DIR}/tmp"
+        )
+elseif (APPLE)
+        set_target_properties(fst_test 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(fst_test 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME fst_test_test COMMAND fst_test --tmpdir=${CMAKE_BINARY_DIR}/tmp WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src/lib)
+
+add_executable(weight_test
+        weight_test.cc
+        ../include/fst/test/weight-tester.h
+        )
+target_link_libraries(weight_test fst ${CMAKE_DL_LIBS})
+if (MSVC)
+        set_target_properties(weight_test 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "PATH=${test_dll_path}"
+        )
+elseif (APPLE)
+        set_target_properties(weight_test
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(weight_test
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME weight_test_test COMMAND weight_test WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src/lib)
+
+
+add_executable(algo_test_log algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_log fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_log
+        PRIVATE TEST_LOG=1)
+if (MSVC)
+        set_target_properties(algo_test_log 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "PATH=${test_dll_path}"
+        )
+elseif (APPLE)
+        set_target_properties(algo_test_log
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(algo_test_log
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME algo_test_log_test COMMAND algo_test_log WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src/lib)
+
+
+add_executable(algo_test_tropical algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_tropical fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_tropical
+        PRIVATE TEST_TROPICAL=1)
+
+if (MSVC)
+        set_target_properties(algo_test_tropical 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "PATH=${test_dll_path}"
+        )
+elseif (APPLE)
+        set_target_properties(algo_test_tropical
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(algo_test_tropical
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME algo_test_tropical_test COMMAND algo_test_tropical WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src/lib)
+
+
+add_executable(algo_test_minmax algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_minmax fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_minmax
+        PRIVATE TEST_MINMAX=1)
+if (MSVC)
+        set_target_properties(algo_test_minmax 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "PATH=${test_dll_path}"
+        )
+elseif (APPLE)
+        set_target_properties(algo_test_minmax
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(algo_test_minmax
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME algo_test_minmax_test COMMAND algo_test_minmax WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src/lib)
+
+
+add_executable(algo_test_lexicographic algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_lexicographic fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_lexicographic
+        PRIVATE TEST_LEXICOGRAPHIC=1)
+if (MSVC)
+        set_target_properties(algo_test_lexicographic 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "PATH=${test_dll_path}"
+        )
+elseif (APPLE)
+        set_target_properties(algo_test_lexicographic
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(algo_test_lexicographic
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME algo_test_lexicographic_test COMMAND algo_test_lexicographic WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src/lib)
+
+
+add_executable(algo_test_power algo_test.cc ../include/fst/test/algo_test.h ../include/fst/test/rand-fst.h)
+target_link_libraries(algo_test_power fst ${CMAKE_DL_LIBS})
+target_compile_definitions(algo_test_power
+        PRIVATE TEST_POWER=1)
+if (MSVC)
+        set_target_properties(algo_test_power 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "PATH=${test_dll_path}"
+        )
+elseif (APPLE)
+        set_target_properties(algo_test_power
+                PROPERTIES  
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(algo_test_power
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME algo_test_power_test COMMAND algo_test_power WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/src/lib)
\ No newline at end of file
diff --git a/src/test/fst_test.cc b/src/test/fst_test.cc
index 1e92051..d8b472a 100644
--- a/src/test/fst_test.cc
+++ b/src/test/fst_test.cc
@@ -56,6 +56,7 @@ struct CustomArc {
 
 REGISTER_FST(VectorFst, CustomArc);
 REGISTER_FST(ConstFst, CustomArc);
+
 static fst::FstRegisterer<
     CompactArcFst<StdArc, TrivialArcCompactor<StdArc>>>
     CompactFst_StdArc_TrivialCompactor_registerer;
@@ -194,8 +195,8 @@ int main(int argc, char **argv) {
       std_compact_tester.TestIO();
     }
 
-    // TODO(jrosenstock): Make this work.
 #if 0
+    // TODO(jrosenstock): Make this work.
     // Test with a default-constructed Fst, not a copied Fst.
     FstTester<CompactArcFst<CustomArc, CustomCompactor<CustomArc>>>
         empty_tester(/*num_states=*/0);
@@ -204,6 +205,7 @@ int main(int argc, char **argv) {
     empty_tester.TestExpanded(empty_fst);
     empty_tester.TestCopy(empty_fst);
     empty_tester.TestIO(empty_fst);
+
 #endif
   }
 
@@ -220,7 +222,6 @@ int main(int argc, char **argv) {
 
     // TODO(jrosenstock): Add tests on default-constructed Fst.
   }
-
   // ConstFst<StdArc, uint16_t> tests
   {
     FstTester<ConstFst<StdArc, uint16_t>> std_const_tester;
-- 
2.35.3

